{
  "meta": {
    "instanceId": "n8n-escalation-mgmt-corrected-001"
  },
  "createdAt": "2025-08-11T00:00:00.000Z",
  "updatedAt": "2025-08-11T00:00:00.000Z",
  "id": "human-escalation-management-corrected",
  "name": "Human Escalation Management (Multi-tenant) - CORRECTED",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "path": "human-escalation",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "webhook-escalation-trigger",
      "name": "üö® Escalation Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "webhookId": "human-escalation"
    },
    {
      "parameters": {
        "functionCode": "// üîç ESCALATION CLASSIFICATION\n// Classifica tipo de escala√ß√£o e define SLA\n\nconst escalationData = $json;\n\n// Extrair dados do webhook\nconst escalationType = escalationData.escalation_type || 'general';\nconst escalationPriority = escalationData.escalation_priority || 'medium';\nconst tenantId = escalationData.tenant_id;\nconst businessDomain = escalationData.business_domain;\nconst userPhone = escalationData.user_phone;\nconst conversationId = escalationData.conversation_id;\nconst originalMessage = escalationData.message_text;\n\n// Definir configura√ß√µes por tipo de escala√ß√£o\nconst escalationConfig = {\n  medical_emergency: {\n    sla_minutes: 5,\n    notification_channels: ['whatsapp', 'sms', 'call'],\n    auto_escalate_after: 3,\n    requires_immediate_response: true,\n    emergency_contacts: true,\n    legal_disclaimer: 'Em caso de emerg√™ncia m√©dica real, ligue 192 (SAMU)'\n  },\n  business_crisis: {\n    sla_minutes: 30,\n    notification_channels: ['whatsapp', 'email'],\n    auto_escalate_after: 2,\n    requires_immediate_response: true,\n    emergency_contacts: false,\n    legal_disclaimer: null\n  },\n  legal_deadline: {\n    sla_minutes: 60,\n    notification_channels: ['whatsapp', 'email'],\n    auto_escalate_after: 1,\n    requires_immediate_response: true,\n    emergency_contacts: false,\n    legal_disclaimer: 'Prazo jur√≠dico identificado - a√ß√£o imediata necess√°ria'\n  },\n  sports_injury: {\n    sla_minutes: 60,\n    notification_channels: ['whatsapp'],\n    auto_escalate_after: 2,\n    requires_immediate_response: false,\n    emergency_contacts: false,\n    legal_disclaimer: 'Para les√µes graves, procure atendimento m√©dico'\n  },\n  spam_detection: {\n    sla_minutes: 1440, // 24 horas\n    notification_channels: ['email'],\n    auto_escalate_after: 0,\n    requires_immediate_response: false,\n    emergency_contacts: false,\n    legal_disclaimer: null\n  },\n  low_confidence: {\n    sla_minutes: 240, // 4 horas\n    notification_channels: ['whatsapp'],\n    auto_escalate_after: 1,\n    requires_immediate_response: false,\n    emergency_contacts: false,\n    legal_disclaimer: null\n  }\n};\n\n// Obter configura√ß√£o para este tipo\nconst config = escalationConfig[escalationType] || escalationConfig.low_confidence;\n\n// Definir profissionais respons√°veis por dom√≠nio\nconst domainProfessionals = {\n  beauty: {\n    primary: {\n      name: 'Marina Silva',\n      phone: '+5511987123456',\n      email: 'marina@salaoelegancia.com',\n      whatsapp: '+5511987123456'\n    },\n    backup: {\n      name: 'Carla Santos',\n      phone: '+5511987123457',\n      email: 'carla@salaoelegancia.com',\n      whatsapp: '+5511987123457'\n    }\n  },\n  healthcare: {\n    primary: {\n      name: 'Dr. Roberto Lima',\n      phone: '+5511987234567',\n      email: 'roberto@clinicavidasaudavel.com',\n      whatsapp: '+5511987234567'\n    },\n    backup: {\n      name: 'Enfermeira Ana Costa',\n      phone: '+5511987234568',\n      email: 'ana@clinicavidasaudavel.com',\n      whatsapp: '+5511987234568'\n    }\n  },\n  legal: {\n    primary: {\n      name: 'Dr. Jo√£o Mendes',\n      phone: '+5511987345678',\n      email: 'joao@advocaciasilva.com',\n      whatsapp: '+5511987345678'\n    },\n    backup: {\n      name: 'Dra. Patricia Oliveira',\n      phone: '+5511987345679',\n      email: 'patricia@advocaciasilva.com',\n      whatsapp: '+5511987345679'\n    }\n  },\n  education: {\n    primary: {\n      name: 'Prof. Carlos Eduardo',\n      phone: '+5511987456789',\n      email: 'carlos@edutech.com',\n      whatsapp: '+5511987456789'\n    },\n    backup: {\n      name: 'Prof. Luciana Ramos',\n      phone: '+5511987456790',\n      email: 'luciana@edutech.com',\n      whatsapp: '+5511987456790'\n    }\n  },\n  sports: {\n    primary: {\n      name: 'Personal Marcos Fit',\n      phone: '+5511987567890',\n      email: 'marcos@fitpro.com',\n      whatsapp: '+5511987567890'\n    },\n    backup: {\n      name: 'Fisioterapeuta Laura',\n      phone: '+5511987567891',\n      email: 'laura@fitpro.com',\n      whatsapp: '+5511987567891'\n    }\n  },\n  consulting: {\n    primary: {\n      name: 'Consultor S√™nior Paulo',\n      phone: '+5511987678901',\n      email: 'paulo@bizconsult.com',\n      whatsapp: '+5511987678901'\n    },\n    backup: {\n      name: 'Analista Senior Vera',\n      phone: '+5511987678902',\n      email: 'vera@bizconsult.com',\n      whatsapp: '+5511987678902'\n    }\n  }\n};\n\n// Obter profissionais para este dom√≠nio\nconst professionals = domainProfessionals[businessDomain] || domainProfessionals.consulting;\n\n// Gerar ID √∫nico para escala√ß√£o\nconst escalationId = `esc_${tenantId}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n\n// Calcular deadline baseado no SLA\nconst deadline = new Date();\ndeadline.setMinutes(deadline.getMinutes() + config.sla_minutes);\n\n// Preparar dados enriquecidos\nreturn [{\n  // Dados originais\n  ...escalationData,\n  \n  // Dados da escala√ß√£o\n  escalation_id: escalationId,\n  escalation_config: config,\n  sla_deadline: deadline.toISOString(),\n  assigned_professionals: professionals,\n  \n  // Controle de fluxo\n  notification_channels: config.notification_channels,\n  requires_immediate_response: config.requires_immediate_response,\n  emergency_contacts_needed: config.emergency_contacts,\n  legal_disclaimer: config.legal_disclaimer,\n  \n  // Tracking\n  escalation_created_at: new Date().toISOString(),\n  escalation_status: 'created',\n  attempts_made: 0,\n  max_escalation_attempts: config.auto_escalate_after\n}];"
      },
      "id": "escalation-classifier",
      "name": "üîç Escalation Classifier",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "insert",
        "table": "conversation_history",
        "columns": {
          "values": [
            {
              "column": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "column": "user_id",
              "value": "={{ $json.user_phone }}"
            },
            {
              "column": "content",
              "value": "={{ $json.message_text }}"
            },
            {
              "column": "is_from_user",
              "value": true
            },
            {
              "column": "message_type",
              "value": "escalation"
            },
            {
              "column": "intent_detected",
              "value": "={{ $json.escalation_type }}"
            },
            {
              "column": "confidence_score",
              "value": 1.0
            },
            {
              "column": "conversation_context",
              "value": "={{ JSON.stringify({ escalation_id: $json.escalation_id, escalation_priority: $json.escalation_priority, business_domain: $json.business_domain, assigned_primary: $json.assigned_professionals.primary.name, assigned_backup: $json.assigned_professionals.backup.name, sla_deadline: $json.sla_deadline, requires_immediate_response: $json.requires_immediate_response, legal_disclaimer: $json.legal_disclaimer }) }}"
            },
            {
              "column": "message_source",
              "value": "escalation_system"
            },
            {
              "column": "conversation_outcome",
              "value": "escalation_created"
            }
          ]
        }
      },
      "id": "log-escalation-case",
      "name": "üìã Log Escalation Case",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [600, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase Main"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is_emergency",
              "leftValue": "={{ $json.requires_immediate_response }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "emergency-check",
      "name": "üö® Emergency Priority?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "functionCode": "// üì± WHATSAPP NOTIFICATION SENDER\n// Envia notifica√ß√£o WhatsApp para profissional\n\nconst notificationData = $json;\n\n// Definir qual profissional notificar (come√ßa com prim√°rio)\nconst professional = notificationData.assigned_professionals.primary;\nconst isEmergency = notificationData.requires_immediate_response;\n\n// Preparar mensagem baseada no tipo de escala√ß√£o\nlet whatsappMessage = '';\nconst escalationType = notificationData.escalation_type;\nconst businessName = notificationData.tenant_name;\nconst clientPhone = notificationData.user_phone;\nconst originalMessage = notificationData.message_text;\n\nswitch(escalationType) {\n  case 'medical_emergency':\n    whatsappMessage = `üö® *EMERG√äNCIA M√âDICA* üö®\\n\\n` +\n      `üè• *Cliente:* ${clientPhone}\\n` +\n      `üìû *Empresa:* ${businessName}\\n` +\n      `‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR')}\\n\\n` +\n      `üí¨ *Mensagem Original:*\\n\"${originalMessage}\"\\n\\n` +\n      `‚ö†Ô∏è *A√á√ÉO NECESS√ÅRIA:* Contate o cliente IMEDIATAMENTE\\n` +\n      `‚òéÔ∏è *Se emerg√™ncia real:* Oriente ligar 192 (SAMU)\\n\\n` +\n      `üîó *ID Caso:* ${notificationData.escalation_id}`;\n    break;\n    \n  case 'business_crisis':\n    whatsappMessage = `üî• *CRISE EMPRESARIAL* üî•\\n\\n` +\n      `üíº *Cliente:* ${clientPhone}\\n` +\n      `üè¢ *Empresa:* ${businessName}\\n` +\n      `‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR')}\\n\\n` +\n      `üí¨ *Situa√ß√£o Relatada:*\\n\"${originalMessage}\"\\n\\n` +\n      `‚ö° *A√á√ÉO NECESS√ÅRIA:* Contate em at√© 30 minutos\\n` +\n      `üìã *Preparar:* An√°lise de crise e plano de conten√ß√£o\\n\\n` +\n      `üîó *ID Caso:* ${notificationData.escalation_id}`;\n    break;\n    \n  case 'legal_deadline':\n    whatsappMessage = `‚öñÔ∏è *PRAZO JUR√çDICO CR√çTICO* ‚öñÔ∏è\\n\\n` +\n      `üë§ *Cliente:* ${clientPhone}\\n` +\n      `üèõÔ∏è *Escrit√≥rio:* ${businessName}\\n` +\n      `‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR')}\\n\\n` +\n      `üìÑ *Assunto Reportado:*\\n\"${originalMessage}\"\\n\\n` +\n      `‚è≥ *A√á√ÉO NECESS√ÅRIA:* Verificar prazo em at√© 1 hora\\n` +\n      `üìö *Preparar:* Documentos e cronograma processual\\n\\n` +\n      `üîó *ID Caso:* ${notificationData.escalation_id}`;\n    break;\n    \n  case 'sports_injury':\n    whatsappMessage = `üè• *LES√ÉO ESPORTIVA* üè•\\n\\n` +\n      `üèÉ *Atleta:* ${clientPhone}\\n` +\n      `üí™ *Academia:* ${businessName}\\n` +\n      `‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR')}\\n\\n` +\n      `ü©π *Les√£o Relatada:*\\n\"${originalMessage}\"\\n\\n` +\n      `ü©∫ *A√á√ÉO NECESS√ÅRIA:* Avaliar se precisa m√©dico primeiro\\n` +\n      `üìã *Depois:* Adaptar treino e acompanhar recupera√ß√£o\\n\\n` +\n      `üîó *ID Caso:* ${notificationData.escalation_id}`;\n    break;\n    \n  default:\n    whatsappMessage = `‚ùì *CASO PARA AN√ÅLISE* ‚ùì\\n\\n` +\n      `üë§ *Cliente:* ${clientPhone}\\n` +\n      `üè¢ *Empresa:* ${businessName}\\n` +\n      `‚è∞ *Hor√°rio:* ${new Date().toLocaleString('pt-BR')}\\n\\n` +\n      `üí¨ *Mensagem:*\\n\"${originalMessage}\"\\n\\n` +\n      `ü§ñ *Motivo:* IA n√£o conseguiu processar automaticamente\\n` +\n      `üìû *A√á√ÉO:* Entre em contato para esclarecer necessidade\\n\\n` +\n      `üîó *ID Caso:* ${notificationData.escalation_id}`;\n}\n\n// Adicionar disclaimer legal se necess√°rio\nif (notificationData.legal_disclaimer) {\n  whatsappMessage += `\\n\\n‚ö†Ô∏è *IMPORTANTE:* ${notificationData.legal_disclaimer}`;\n}\n\n// Preparar payload WhatsApp\nconst whatsappPayload = {\n  messaging_product: 'whatsapp',\n  to: professional.whatsapp,\n  type: 'text',\n  text: {\n    body: whatsappMessage\n  }\n};\n\nreturn [{\n  ...notificationData,\n  \n  // Dados da notifica√ß√£o\n  notification_recipient: professional,\n  whatsapp_payload: whatsappPayload,\n  whatsapp_message: whatsappMessage,\n  notification_channel: 'whatsapp',\n  notification_sent_at: new Date().toISOString(),\n  \n  // Controle de tentativas\n  current_attempt: 1,\n  notification_target: professional.whatsapp\n}];"
      },
      "id": "whatsapp-notification",
      "name": "üì± WhatsApp Notification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ $env.WHATSAPP_PHONE_NUMBER_ID }}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.WHATSAPP_TOKEN }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "={{ JSON.stringify($json.whatsapp_payload) }}",
        "options": {}
      },
      "id": "send-whatsapp-notification",
      "name": "üì§ Send WhatsApp",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "functionCode": "// üìß EMAIL NOTIFICATION SENDER\n// Envia notifica√ß√£o por email para casos n√£o-emergenciais\n\nconst emailData = $json;\nconst professional = emailData.assigned_professionals.primary;\nconst escalationType = emailData.escalation_type;\nconst businessName = emailData.tenant_name;\nconst clientPhone = emailData.user_phone;\nconst originalMessage = emailData.message_text;\nconst escalationId = emailData.escalation_id;\n\n// Preparar assunto e corpo do email\nlet emailSubject = '';\nlet emailBody = '';\n\nswitch(escalationType) {\n  case 'business_crisis':\n    emailSubject = `üî• CRISE EMPRESARIAL - ${businessName} - ID: ${escalationId}`;\n    emailBody = `\n      <h2 style=\"color: #ff4444;\">üî• CRISE EMPRESARIAL DETECTADA</h2>\n      <p><strong>Cliente:</strong> ${clientPhone}</p>\n      <p><strong>Empresa:</strong> ${businessName}</p>\n      <p><strong>Hor√°rio:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n      <hr>\n      <h3>Situa√ß√£o Relatada:</h3>\n      <blockquote style=\"background: #f5f5f5; padding: 15px; border-left: 4px solid #ff4444;\">\n        ${originalMessage}\n      </blockquote>\n      <hr>\n      <h3>‚ö° A√á√ÉO NECESS√ÅRIA:</h3>\n      <ul>\n        <li>Contatar cliente em at√© <strong>30 minutos</strong></li>\n        <li>Preparar an√°lise de crise e plano de conten√ß√£o</li>\n        <li>Documentar todas as a√ß√µes tomadas</li>\n      </ul>\n      <p><strong>ID do Caso:</strong> ${escalationId}</p>\n    `;\n    break;\n    \n  case 'legal_deadline':\n    emailSubject = `‚öñÔ∏è PRAZO JUR√çDICO CR√çTICO - ${businessName} - ID: ${escalationId}`;\n    emailBody = `\n      <h2 style=\"color: #ff8800;\">‚öñÔ∏è PRAZO JUR√çDICO CR√çTICO</h2>\n      <p><strong>Cliente:</strong> ${clientPhone}</p>\n      <p><strong>Escrit√≥rio:</strong> ${businessName}</p>\n      <p><strong>Hor√°rio:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n      <hr>\n      <h3>Assunto Reportado:</h3>\n      <blockquote style=\"background: #f5f5f5; padding: 15px; border-left: 4px solid #ff8800;\">\n        ${originalMessage}\n      </blockquote>\n      <hr>\n      <h3>‚è≥ A√á√ÉO NECESS√ÅRIA:</h3>\n      <ul>\n        <li>Verificar prazo processual em at√© <strong>1 hora</strong></li>\n        <li>Preparar documentos necess√°rios</li>\n        <li>Verificar cronograma processual</li>\n        <li>Contatar cliente para confirma√ß√£o</li>\n      </ul>\n      <p><strong>ID do Caso:</strong> ${escalationId}</p>\n    `;\n    break;\n    \n  default:\n    emailSubject = `‚ùì Caso para An√°lise - ${businessName} - ID: ${escalationId}`;\n    emailBody = `\n      <h2 style=\"color: #4444ff;\">‚ùì CASO PARA AN√ÅLISE</h2>\n      <p><strong>Cliente:</strong> ${clientPhone}</p>\n      <p><strong>Empresa:</strong> ${businessName}</p>\n      <p><strong>Hor√°rio:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n      <hr>\n      <h3>Mensagem:</h3>\n      <blockquote style=\"background: #f5f5f5; padding: 15px; border-left: 4px solid #4444ff;\">\n        ${originalMessage}\n      </blockquote>\n      <hr>\n      <h3>üìû A√á√ÉO NECESS√ÅRIA:</h3>\n      <p>A IA n√£o conseguiu processar automaticamente esta mensagem.</p>\n      <p>Entre em contato com o cliente para esclarecer a necessidade.</p>\n      <p><strong>ID do Caso:</strong> ${escalationId}</p>\n    `;\n}\n\nreturn [{\n  ...emailData,\n  \n  // Dados do email\n  email_recipient: professional.email,\n  email_subject: emailSubject,\n  email_body: emailBody,\n  email_sent_at: new Date().toISOString(),\n  notification_channel: 'email'\n}];"
      },
      "id": "email-notification",
      "name": "üìß Email Notification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "fromEmail": "notifications@stratfin.tec.br",
        "toEmail": "={{ $json.email_recipient }}",
        "subject": "={{ $json.email_subject }}",
        "emailType": "html",
        "message": "={{ $json.email_body }}",
        "options": {}
      },
      "id": "send-email-notification",
      "name": "üì§ Send Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1200, 400],
      "credentials": {
        "smtp": {
          "id": "smtp-main",
          "name": "SMTP Main"
        }
      }
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "insert",
        "table": "conversation_history",
        "columns": {
          "values": [
            {
              "column": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "column": "user_id",
              "value": "={{ $json.notification_recipient.name }}"
            },
            {
              "column": "content",
              "value": "={{ $json.whatsapp_message || $json.email_subject }}"
            },
            {
              "column": "is_from_user",
              "value": false
            },
            {
              "column": "message_type",
              "value": "escalation_notification"
            },
            {
              "column": "intent_detected",
              "value": "={{ $json.escalation_type }}"
            },
            {
              "column": "confidence_score",
              "value": 1.0
            },
            {
              "column": "conversation_context",
              "value": "={{ JSON.stringify({ escalation_id: $json.escalation_id, notification_type: $json.notification_channel, recipient: $json.notification_recipient.name, recipient_contact: $json.notification_target || $json.email_recipient, sent_at: $json.notification_sent_at || $json.email_sent_at, attempt_number: $json.current_attempt || 1 }) }}"
            },
            {
              "column": "message_source",
              "value": "escalation_notification"
            },
            {
              "column": "conversation_outcome",
              "value": "notification_sent"
            }
          ]
        }
      },
      "id": "log-notification",
      "name": "üìù Log Notification",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1400, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase Main"
        }
      }
    },
    {
      "parameters": {
        "unit": "minutes",
        "amount": "={{ $json.escalation_config.sla_minutes }}"
      },
      "id": "sla-timer",
      "name": "‚è∞ SLA Timer",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1600, 300]
    },
    {
      "parameters": {
        "resource": "row",
        "operation": "getAll",
        "table": "conversation_history",
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "conversation_context",
              "condition": "contains",
              "keyValue": "={{ $json.escalation_id }}"
            },
            {
              "keyName": "message_type",
              "condition": "equals",
              "keyValue": "escalation"
            }
          ]
        }
      },
      "id": "check-escalation-status",
      "name": "‚úÖ Check Status",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1800, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase Main"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "still_open",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "escalation-needed-check",
      "name": "üîÑ Auto-Escalate?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "functionCode": "// üìà AUTO ESCALATION HANDLER\n// Escala√ß√£o autom√°tica para backup quando SLA n√£o √© atendido\n\nconst escalationData = $json;\n\n// Incrementar tentativa\nconst currentAttempts = escalationData.attempts_made || 0;\nconst newAttempts = currentAttempts + 1;\n\n// Determinar pr√≥ximo profissional (backup)\nconst backupProfessional = escalationData.assigned_professionals.backup;\n\n// Preparar mensagem de escala√ß√£o\nconst escalationMessage = `üÜô *ESCALA√á√ÉO AUTOM√ÅTICA* üÜô\\n\\n` +\n  `‚ö†Ô∏è *Caso n√£o respondido dentro do SLA*\\n` +\n  `üîó *ID Original:* ${escalationData.escalation_id}\\n` +\n  `‚è∞ *Tentativa:* ${newAttempts}/${escalationData.max_escalation_attempts}\\n\\n` +\n  `üë§ *Cliente:* ${escalationData.user_phone}\\n` +\n  `üè¢ *Empresa:* ${escalationData.tenant_name}\\n` +\n  `üìã *Tipo:* ${escalationData.escalation_type}\\n\\n` +\n  `üí¨ *Mensagem Original:*\\n\"${escalationData.message_text}\"\\n\\n` +\n  `üö® *A√á√ÉO URGENTE NECESS√ÅRIA*\\n` +\n  `üìû *Status:* Profissional prim√°rio n√£o respondeu`;\n\n// Preparar payload para WhatsApp do backup\nconst whatsappPayload = {\n  messaging_product: 'whatsapp',\n  to: backupProfessional.whatsapp,\n  type: 'text',\n  text: {\n    body: escalationMessage\n  }\n};\n\nreturn [{\n  ...escalationData,\n  \n  // Dados da auto-escala√ß√£o\n  auto_escalation: true,\n  escalation_attempt: newAttempts,\n  backup_professional: backupProfessional,\n  escalation_message: escalationMessage,\n  whatsapp_payload: whatsappPayload,\n  escalated_at: new Date().toISOString(),\n  escalation_reason: 'SLA_TIMEOUT'\n}];"
      },
      "id": "auto-escalation-handler",
      "name": "üìà Auto Escalation",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2200, 200]
    },
    {
      "parameters": {
        "functionCode": "// ‚úÖ SUCCESS RESPONSE HANDLER\n// Resposta final de sucesso da escala√ß√£o\n\nconst successData = $json;\n\n// Preparar resposta de sucesso\nconst successResponse = {\n  status: 'escalation_processed',\n  message: 'Human escalation processed successfully',\n  data: {\n    escalation_id: successData.escalation_id,\n    escalation_type: successData.escalation_type,\n    tenant_id: successData.tenant_id,\n    business_domain: successData.business_domain,\n    priority_level: successData.escalation_priority,\n    assigned_professional: successData.notification_recipient?.name || successData.assigned_professionals.primary.name,\n    notifications_sent: successData.notification_channel || 'multiple',\n    sla_minutes: successData.escalation_config?.sla_minutes || 'undefined',\n    requires_immediate_response: successData.requires_immediate_response,\n    auto_escalated: successData.auto_escalation || false,\n    processing_completed_at: new Date().toISOString(),\n    test_execution_id: successData.test_execution_id\n  },\n  timestamp: new Date().toISOString()\n};\n\nreturn [successResponse];"
      },
      "id": "escalation-success-response",
      "name": "‚úÖ Escalation Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2400, 300]
    }
  ],
  "connections": {
    "üö® Escalation Trigger": {
      "main": [
        [
          {
            "node": "üîç Escalation Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Escalation Classifier": {
      "main": [
        [
          {
            "node": "üìã Log Escalation Case",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Log Escalation Case": {
      "main": [
        [
          {
            "node": "üö® Emergency Priority?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üö® Emergency Priority?": {
      "main": [
        [
          {
            "node": "üìß Email Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üì± WhatsApp Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì± WhatsApp Notification": {
      "main": [
        [
          {
            "node": "üì§ Send WhatsApp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì§ Send WhatsApp": {
      "main": [
        [
          {
            "node": "üìù Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìß Email Notification": {
      "main": [
        [
          {
            "node": "üì§ Send Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì§ Send Email": {
      "main": [
        [
          {
            "node": "üìù Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìù Log Notification": {
      "main": [
        [
          {
            "node": "‚è∞ SLA Timer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚è∞ SLA Timer": {
      "main": [
        [
          {
            "node": "‚úÖ Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Check Status": {
      "main": [
        [
          {
            "node": "üîÑ Auto-Escalate?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Auto-Escalate?": {
      "main": [
        [
          {
            "node": "‚úÖ Escalation Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üìà Auto Escalation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìà Auto Escalation": {
      "main": [
        [
          {
            "node": "‚úÖ Escalation Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "hash": "escalation-mgmt-corrected-hash-001",
  "versionId": 1
}