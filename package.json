{
  "name": "universal-booking-system",
  "version": "1.0.0",
  "description": "Sistema Universal de Agendamentos Multi-Tenant com WhatsApp AI - Suporta jurídico, saúde, educação, beleza, esportes e mais",
  "main": "dist/index.js",
  "directories": {
    "doc": "docs"
  },
  "scripts": {
    "start": "node dist/index.js",
    "dev": "nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts",
    "dev:alt": "kill-port 3001 && cross-env PORT=3001 nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts",
    "build": "tsc -p tsconfig.deploy.json",
    "build:watch": "tsc --watch",
    "build:frontend": "webpack --config webpack.production.config.js",
    "build:frontend:dev": "webpack --mode=development",
    "build:frontend:analyze": "cross-env ANALYZE=true webpack --mode=production",
    "build:all": "npm run build && npm run build:frontend",
    "clean": "rm -rf dist && rm -rf src/frontend/dist",
    "optimize": "node scripts/simple-minify.js",
    "performance:test": "node test-advanced-performance.js",
    "performance:optimize": "node -e \"require('./src/frontend/js/performance/performance-optimizer.js')\"",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "format": "prettier --write src/**/*.ts",
    "test": "echo \"Error: no test specified\" && exit 1",
    "test:ai": "ts-node src/test-ai-scenarios.ts",
    "test:ai-full": "ts-node src/test-ai-scenarios.ts --full",
    "test:whatsapp": "ts-node src/test-whatsapp-integration.ts",
    "test:action-executor": "ts-node src/demo-action-executor.ts",
    "test:intent-recognition": "ts-node src/demo-simple-intent.ts",
    "test:multimodal": "ts-node src/test-multimodal.ts",
    "test:stress": "ts-node src/test-whatsapp-integration.ts --stress --count=5",
    "test:all": "npm run test:ai && npm run test:ai-full && npm run test:action-executor && npm run test:intent-recognition && npm run test:multimodal && npm run test:stress",
    "validate:metrics": "node script-validacao-metricas.js",
    "validate:metrics:7d": "node script-validacao-metricas.js 7",
    "validate:metrics:90d": "node script-validacao-metricas.js 90",
    "validate:metrics:python": "python3 validacao-metricas-python.py",
    "validate:metrics:python:7d": "python3 validacao-metricas-python.py 7",
    "validate:metrics:python:90d": "python3 validacao-metricas-python.py 90",
    "validate:framework": "node validation-framework-final.js",
    "validate:tenant": "node validation-framework-final.js",
    "validate:quality": "node validation-framework-final.js",
    "validate:tenant:centro-educacional": "node validation-framework-final.js c3aa73f8-db80-40db-a9c4-73718a0fee34",
    "validate:tenant:charme-total": "node validation-framework-final.js 5bd592ee-8247-4a62-862e-7491fa499103",
    "validate:tenant:bella-vista": "node validation-framework-final.js 33b8c488-5aa9-4891-b335-701d10296681",
    "somas:base:tenant": "node somas-base-tenant-js.js",
    "somas:base:tenant:all": "node somas-base-tenant-js.js && echo 'Somas calculadas para 7, 30 e 90 dias'",
    "test:complete-system-validation": "node dist/test-complete-system-validation.js",
    "test:email": "node test-email-system.js",
    "email:test-config": "node -e \"const {EmailService} = require('./dist/services/email.service.js'); new EmailService().testConfiguration().then(r => console.log(r))\"",
    "email:send-test": "node -e \"const {EmailService} = require('./dist/services/email.service.js'); const es = new EmailService(); es.sendTestEmail('admin@test.com', 'Test Email', 'This is a test email.').then(() => console.log('Test email sent!'))\"",
    "monitoring:status": "node -e \"const {subscriptionMonitor} = require('./dist/services/subscription-monitor-enhanced.service.js'); console.log(subscriptionMonitor.getStatus())\"",
    "monitoring:trigger-trial": "node -e \"const {subscriptionMonitor} = require('./dist/services/subscription-monitor-enhanced.service.js'); subscriptionMonitor.triggerTrialCheck().then(() => console.log('Trial check completed!'))\"",
    "monitoring:trigger-usage": "node -e \"const {subscriptionMonitor} = require('./dist/services/subscription-monitor-enhanced.service.js'); subscriptionMonitor.triggerUsageCheck().then(() => console.log('Usage check completed!'))\"",
    "monitoring:daily-summary": "node -e \"const {subscriptionMonitor} = require('./dist/services/subscription-monitor-enhanced.service.js'); subscriptionMonitor.triggerDailySummary().then(() => console.log('Daily summary sent!'))\"",
    "commit": "./scripts/commit.sh",
    "auto-commit": "./scripts/auto-commit.sh",
    "push": "git push origin main",
    "deploy": "npm run build && npm run push",
    "db:migrate": "node scripts/migrate.js",
    "db:seed": "node scripts/seed.js",
    "db:seed-comprehensive": "node scripts/seed-comprehensive-data.js",
    "db:test-seed": "node scripts/test-seed-data.js",
    "db:populate": "npm run db:seed-comprehensive && npm run db:test-seed",
    "db:setup-admin": "node scripts/setup-admin-tables.js",
    "db:get-service-key": "node scripts/get-service-key.js",
    "db:test-connections": "node scripts/test-supabase-connections.js",
    "db:fix-schema": "node scripts/fix-database-schema.js",
    "db:create-sample-data": "node scripts/create-sample-data.js",
    "db:setup": "./scripts/setup-database.sh setup",
    "db:reset": "./scripts/setup-database.sh reset",
    "db:test-connection": "./scripts/setup-database.sh test",
    "db:reset-analytics": "node scripts/reset-analytics-optimization.js",
    "db:setup-analytics-optimization": "node scripts/setup-analytics-optimization.js",
    "analytics:aggregate": "node -e \"const {getSchedulerInstance} = require('./dist/services/analytics-scheduler.service.js'); getSchedulerInstance().triggerJob('dailyAggregation').then(() => console.log('Aggregation completed'))\"",
    "analytics:refresh-views": "node -e \"const {getSchedulerInstance} = require('./dist/services/analytics-scheduler.service.js'); getSchedulerInstance().triggerJob('materializedViewRefresh').then(() => console.log('Views refreshed'))\"",
    "analytics:health-check": "node -e \"const {getSchedulerInstance} = require('./dist/services/analytics-scheduler.service.js'); getSchedulerInstance().triggerJob('healthCheck').then(() => console.log('Health check completed'))\"",
    "metrics:comprehensive": "node -e \"const TenantMetricsCronOptimizedService = require('./dist/services/tenant-metrics-cron-optimized.service.js').default; const service = new TenantMetricsCronOptimizedService(); service.initialize().then(() => service.triggerComprehensiveCalculation()).then(() => console.log('Comprehensive metrics completed'))\"",
    "metrics:risk-assessment": "node -e \"const TenantMetricsCronOptimizedService = require('./dist/services/tenant-metrics-cron-optimized.service.js').default; const service = new TenantMetricsCronOptimizedService(); service.initialize().then(() => service.triggerRiskAssessment()).then(() => console.log('Risk assessment completed'))\"",
    "metrics:platform-agg": "node -e \"const TenantMetricsCronOptimizedService = require('./dist/services/tenant-metrics-cron-optimized.service.js').default; const service = new TenantMetricsCronOptimizedService(); service.initialize().then(() => service.triggerPlatformAggregation()).then(() => console.log('Platform aggregation completed'))\"",
    "redis:monitor": "node -e \"const {TenantMetricsRedisCache} = require('./dist/services/tenant-metrics/tenant-metrics-redis-cache.service.js'); console.log('Redis monitoring would start here - implement monitoring script')\"",
    "redis:optimize": "node -e \"const winston = require('winston'); const logger = winston.createLogger({level: 'info', format: winston.format.json(), transports: [new winston.transports.Console()]}); const {TenantMetricsRedisCache} = require('./dist/services/tenant-metrics/tenant-metrics-redis-cache.service.js'); const cache = new TenantMetricsRedisCache(logger, {}); cache.optimize().then(() => console.log('Redis optimized'))\"",
    "cron:status": "node -e \"console.log('Optimized system active - use metrics:* commands')\"",
    "test:rls-security": "node scripts/test-rls-security.js",
    "test:security": "npm run test:rls-security",
    "logs": "tail -f logs/app.log",
    "setup": "npm install && npm run build",
    "serve": "npm run build && npm start",
    "demo:rules": "npx ts-node src/demo-rules-system.ts",
    "cloudflare:status": "node scripts/check-cloudflare-status.js",
    "cloudflare:login": "wrangler login",
    "cloudflare:whoami": "wrangler whoami",
    "cloudflare:accounts": "wrangler account list",
    "cloudflare:zones": "wrangler d1 list",
    "cloudflare:workers": "wrangler workers list",
    "cloudflare:ssl": "wrangler ssl list",
    "cloudflare:analytics": "wrangler analytics",
    "cloudflare:deploy": "wrangler deploy",
    "cloudflare:deploy:staging": "wrangler deploy --env staging",
    "cloudflare:deploy:production": "wrangler deploy --env production",
    "cloudflare:dev": "wrangler dev",
    "cloudflare:dev:staging": "wrangler dev --env staging",
    "cloudflare:tail": "wrangler tail",
    "cloudflare:tail:staging": "wrangler tail --env staging",
    "cloudflare:pages:deploy": "wrangler pages deploy dist/frontend",
    "cloudflare:pages:deploy:staging": "wrangler pages deploy dist/frontend --env staging",
    "cloudflare:cache:purge": "wrangler cache purge",
    "cloudflare:setup": "npm run cloudflare:login && npm run cloudflare:status",
    "test:e2e": "playwright test",
    "memory:test": "node --expose-gc --max-old-space-size=128 test-memory-optimization.js",
    "memory:start": "./scripts/memory-optimized-start.sh",
    "memory:dev": "./scripts/memory-optimized-start.sh dev",
    "memory:prod": "./scripts/memory-optimized-start.sh production",
    "memory:analyze": "node --expose-gc --trace-gc --trace-gc-verbose test-memory-optimization.js",
    "memory:profile": "node --inspect --expose-gc --max-old-space-size=128 src/index.ts",
    "memory:benchmark": "node --expose-gc scripts/memory-benchmark.js",
    "generate:diagrams": "mmdc -i docs/visual-flows/*.md -o docs/visual-flows/images/",
    "calendar:cleanup": "node -e \"const CalendarCleanupService = require('./src/services/calendar-cleanup.service.js'); new CalendarCleanupService().triggerManualCleanup()\"",
    "calendar:test-encryption": "node -e \"const EncryptionService = require('./src/utils/encryption.service.js'); const enc = new EncryptionService(); enc.encrypt('test').then(e => enc.decrypt(e)).then(console.log)\"",
    "metrics:complete": "npm run metrics:comprehensive && node populate-validated-metrics.js",
    "metrics:validated-only": "node populate-validated-metrics.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Marseau/universal-booking-system.git"
  },
  "keywords": [
    "booking",
    "appointment",
    "whatsapp",
    "ai",
    "multi-tenant",
    "universal",
    "saas",
    "automation",
    "scheduling"
  ],
  "author": "Marseau Franco <marseau@email.com>",
  "license": "MIT",
  "type": "commonjs",
  "bugs": {
    "url": "https://github.com/Marseau/universal-booking-system/issues"
  },
  "homepage": "https://github.com/Marseau/universal-booking-system#readme",
  "dependencies": {
    "@octokit/rest": "^22.0.0",
    "@supabase/supabase-js": "^2.50.5",
    "axios": "^1.10.0",
    "bcrypt": "^6.0.0",
    "bcryptjs": "^2.4.3",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "csv-parse": "^6.0.0",
    "csv-parser": "^3.2.0",
    "dotenv": "^16.6.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "googleapis": "^133.0.0",
    "helmet": "^7.1.0",
    "ioredis": "^5.6.1",
    "jsonwebtoken": "^9.0.2",
    "mime-types": "^2.1.35",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^3.0.3",
    "node-fetch": "^2.7.0",
    "nodemailer": "^6.9.8",
    "openai": "^5.16.0",
    "pg": "^8.16.3",
    "playwright": "^1.54.1",
    "qrcode-terminal": "^0.12.0",
    "rate-limiter-flexible": "^2.4.1",
    "stripe": "^14.25.0",
    "uuid": "^11.1.0",
    "whatsapp-web.js": "^1.23.0",
    "winston": "^3.11.0",
    "ws": "^8.18.3"
  },
  "devDependencies": {
    "@babel/core": "^7.28.0",
    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
    "@babel/polyfill": "^7.12.1",
    "@babel/preset-env": "^7.28.0",
    "@eslint/js": "^9.35.0",
    "@mermaid-js/mermaid-cli": "^10.9.1",
    "@playwright/test": "^1.54.1",
    "@types/bcrypt": "^5.0.2",
    "@types/bcryptjs": "^2.4.6",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/mime-types": "^2.1.4",
    "@types/morgan": "^1.9.9",
    "@types/multer": "^1.4.8",
    "@types/node": "^20.11.5",
    "@types/node-cron": "^3.0.11",
    "@types/node-fetch": "^2.6.12",
    "@types/nodemailer": "^6.4.14",
    "@types/supertest": "^6.0.3",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "autoprefixer": "^10.4.21",
    "babel-loader": "^10.0.0",
    "babel-plugin-transform-remove-console": "^6.9.4",
    "clean-css": "^5.3.3",
    "compression-webpack-plugin": "^11.1.0",
    "concurrently": "^8.2.2",
    "copy-webpack-plugin": "^13.0.0",
    "core-js": "^3.44.0",
    "cross-env": "^7.0.3",
    "css-loader": "^7.1.2",
    "css-minimizer-webpack-plugin": "^7.0.2",
    "cssnano": "^7.1.0",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-react": "^7.37.5",
    "glob": "^11.0.3",
    "globals": "^16.3.0",
    "html-webpack-plugin": "^5.6.3",
    "image-webpack-loader": "^8.1.0",
    "jest": "^29.7.0",
    "kill-port": "^2.0.1",
    "mini-css-extract-plugin": "^2.9.2",
    "nodemon": "^3.1.10",
    "postcss-loader": "^8.1.1",
    "prettier": "^3.6.2",
    "puppeteer": "^24.15.0",
    "supertest": "^7.1.3",
    "terser": "^5.43.1",
    "terser-webpack-plugin": "^5.3.14",
    "ts-jest": "^29.4.0",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.3.3",
    "typescript-eslint": "^8.42.0",
    "webpack": "^5.100.2",
    "webpack-bundle-analyzer": "^4.10.2",
    "webpack-cli": "^6.0.1"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
