require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function executarPipelineCom4Campos() {
    console.log('üöÄ EXECUTANDO PIPELINE COM 4 CAMPOS JSON COMPLETOS');
    console.log('='.repeat(70));
    
    const client = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
    
    try {
        // 1. Limpar platform_metrics
        console.log('üßπ Limpando platform_metrics...');
        await client.from('platform_metrics').delete().neq('id', '00000000-0000-0000-0000-000000000000');
        
        // 2. Executar PlatformAggregationService atualizado
        console.log('üîÑ Executando PlatformAggregationService atualizado...');
        
        // Usar o servi√ßo compilado diretamente
        const PlatformAggregationService = require('./dist/services/platform-aggregation.service.js').PlatformAggregationService;
        const service = new PlatformAggregationService();
        
        // Executar para todos os per√≠odos
        const result = await service.executeCompletePlatformAggregation();
        
        console.log('\\nüìä RESULTADO DA EXECU√á√ÉO:', result);
        
        // 3. Verifica√ß√£o da estrutura
        console.log('\\nüîç VERIFICA√á√ÉO DA ESTRUTURA COM 4 CAMPOS JSON...');
        
        const { data: finalData } = await client
            .from('platform_metrics')
            .select('period, comprehensive_metrics, participation_metrics, ranking_metrics, metric_data')
            .order('created_at', { ascending: false });
        
        if (finalData && finalData.length > 0) {
            console.log('\\n‚úÖ ESTRUTURA FINAL CONFIRMADA:');
            
            finalData.forEach((record, i) => {
                const jsonFields = [
                    { name: 'comprehensive_metrics', data: record.comprehensive_metrics },
                    { name: 'participation_metrics', data: record.participation_metrics },
                    { name: 'ranking_metrics', data: record.ranking_metrics },
                    { name: 'metric_data', data: record.metric_data }
                ];
                
                console.log(`\\n   üìã Registro ${i+1} - Per√≠odo: ${record.period}`);
                
                jsonFields.forEach(field => {
                    const present = field.data !== null && field.data !== undefined;
                    const keys = present ? Object.keys(field.data).length : 0;
                    console.log(`     ‚Ä¢ ${field.name}: ${present ? '‚úÖ PRESENTE' : '‚ùå AUSENTE'} (${keys} chaves)`);
                });
                
                const totalJsonFields = jsonFields.filter(f => f.data !== null && f.data !== undefined).length;
                console.log(`     üéØ Total JSON fields: ${totalJsonFields}/4`);
            });
            
            // Status final
            const allHave4Fields = finalData.every(record => 
                record.comprehensive_metrics && 
                record.participation_metrics && 
                record.ranking_metrics && 
                record.metric_data
            );
            
            console.log(`\\nüèÜ STATUS FINAL: ${allHave4Fields ? 'TODOS OS REGISTROS T√äM 4 CAMPOS JSON' : 'ALGUNS REGISTROS AINDA T√äM PROBLEMAS'}`);
            
            return allHave4Fields;
        } else {
            console.log('‚ùå Nenhum registro encontrado ap√≥s execu√ß√£o');
            return false;
        }
        
    } catch (error) {
        console.error('üí• Erro na execu√ß√£o:', error.message);
        return false;
    }
}

executarPipelineCom4Campos()
    .then(success => {
        if (success) {
            console.log('\\nüéâ PIPELINE COM 4 CAMPOS JSON EXECUTADO COM SUCESSO!');
            console.log('‚úÖ platform_metrics tem estrutura completa igual a tenant_metrics');
        } else {
            console.log('\\n‚ùå PIPELINE FALHOU OU ESTRUTURA INCOMPLETA');
        }
        process.exit(success ? 0 : 1);
    })
    .catch(console.error);