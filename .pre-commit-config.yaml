# =====================================================
# PRE-COMMIT HOOKS - FRONTEND PROTECTION
# Executa verifica√ß√µes antes de cada commit para proteger integridade
# =====================================================

repos:
  # =====================================================
  # VERIFICA√á√ïES LOCAIS CUSTOMIZADAS
  # =====================================================
  - repo: local
    hooks:
      # Verifica√ß√£o de integridade de arquivos cr√≠ticos
      - id: frontend-integrity-check
        name: Frontend Integrity Check
        entry: node scripts/verify-frontend-integrity.js
        language: node
        files: 'src/frontend/.*|.*\.md$|tests/.*|playwright\.config\.js'
        pass_filenames: false
        always_run: false
        
      # Verifica√ß√£o de versionamento de componentes
      - id: component-version-check
        name: Component Version Check
        entry: bash
        language: bash
        files: 'src/frontend/.*\.html$|src/frontend/.*\.js$'
        args: 
          - -c
          - |
            echo "üîß Checking component versions..."
            if [ -f "src/frontend/js/utils/component-versioning.js" ]; then
              echo "‚úÖ Component versioning system found"
            else
              echo "‚ùå Component versioning system missing!"
              exit 1
            fi
        
      # Verifica√ß√£o r√°pida de acessibilidade
      - id: accessibility-quick-check
        name: Quick Accessibility Check  
        entry: bash
        language: bash
        files: 'src/frontend/.*\.html$'
        args:
          - -c
          - |
            echo "‚ôø Quick accessibility check..."
            for file in $(git diff --cached --name-only | grep "src/frontend/.*\.html$"); do
              if [ -f "$file" ]; then
                # Verificar se tem atributos de acessibilidade b√°sicos
                if ! grep -q "aria-label\|aria-labelledby\|alt=" "$file"; then
                  echo "‚ö†Ô∏è  $file may be missing accessibility attributes"
                fi
                # Verificar estrutura de headings
                if ! grep -q "<h[1-6]" "$file"; then
                  echo "‚ö†Ô∏è  $file may be missing heading structure"
                fi
              fi
            done
            echo "‚úÖ Quick accessibility check completed"
            
      # Preven√ß√£o de mudan√ßas cr√≠ticas sem override
      - id: prevent-critical-changes
        name: Prevent Unauthorized Critical Changes
        entry: bash
        language: bash
        files: 'MASTER_INTEGRATION_DASHBOARD_TENANT_PLATAFORMA\.md|FRONTEND_INTEGRITY_ASSURANCE_SYSTEM\.md|src/frontend/tenant-business-analytics\.html'
        args:
          - -c
          - |
            if [ "$FRONTEND_CRITICAL_OVERRIDE" != "true" ]; then
              echo "üö® CRITICAL FILE MODIFICATION DETECTED!"
              echo ""
              echo "You are attempting to modify critical frontend files:"
              for file in $(git diff --cached --name-only | grep -E "(MASTER_INTEGRATION|FRONTEND_INTEGRITY|tenant-business-analytics\.html)"); do
                echo "  üî¥ $file"
              done
              echo ""
              echo "To allow this change, run:"
              echo "  FRONTEND_CRITICAL_OVERRIDE=true git commit -m '[CRITICAL-CHANGE] Your message'"
              echo ""
              echo "‚ö†Ô∏è  Remember to:"
              echo "  1. Test all visual regression tests"
              echo "  2. Verify accessibility compliance"
              echo "  3. Check API contract integrity"
              echo "  4. Update frontend integrity checksums after approval"
              echo ""
              exit 1
            else
              echo "üîì Critical change override enabled"
              echo "‚úÖ Proceeding with critical file modifications"
            fi

  # =====================================================
  # VERIFICA√á√ïES PADR√ÉO DE QUALIDADE DE C√ìDIGO
  # =====================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Verifica√ß√µes b√°sicas de arquivo
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: check-case-conflict
      
      # Verifica√ß√µes de JavaScript/HTML
      - id: check-ast
        files: \.js$
      - id: pretty-format-json
        args: [--autofix, --indent=2]
        files: \.json$
        
  # =====================================================
  # VERIFICA√á√ïES DE FRONTEND ESPEC√çFICAS
  # =====================================================
  - repo: local
    hooks:
      # Verificar se arquivos HTML s√£o v√°lidos
      - id: html-validation
        name: HTML Validation
        entry: bash
        language: bash
        files: 'src/frontend/.*\.html$'
        args:
          - -c
          - |
            echo "üåê Validating HTML files..."
            for file in $(git diff --cached --name-only | grep "src/frontend/.*\.html$"); do
              if [ -f "$file" ]; then
                # Verifica√ß√µes b√°sicas de HTML
                if ! grep -q "<!DOCTYPE html>" "$file"; then
                  echo "‚ùå $file missing DOCTYPE declaration"
                  exit 1
                fi
                if ! grep -q "<html" "$file"; then
                  echo "‚ùå $file missing html tag"
                  exit 1
                fi
                # Verificar tags n√£o fechadas (b√°sico)
                if ! grep -q "</html>" "$file"; then
                  echo "‚ùå $file missing closing html tag"
                  exit 1
                fi
                echo "‚úÖ $file HTML structure OK"
              fi
            done
            
      # Verificar se scripts JavaScript s√£o v√°lidos
      - id: js-syntax-check
        name: JavaScript Syntax Check
        entry: node
        language: node
        files: 'src/frontend/.*\.js$'
        args: [-c, "console.log('‚úÖ JavaScript syntax check passed')"]
        
      # Verificar se n√£o h√° mock data em arquivos de produ√ß√£o
      - id: no-mock-data
        name: No Mock Data in Production
        entry: bash
        language: bash
        files: 'src/frontend/.*\.(js|html)$'
        args:
          - -c
          - |
            echo "üîç Checking for mock data..."
            for file in $(git diff --cached --name-only | grep "src/frontend/.*\.(js|html)$"); do
              if [ -f "$file" ]; then
                if grep -q "mock\|fake\|dummy\|test.*data" "$file" | grep -v "mock-jwt-token-for"; then
                  echo "‚ö†Ô∏è  $file may contain mock data"
                  grep -n "mock\|fake\|dummy\|test.*data" "$file" | head -3
                fi
              fi
            done
            echo "‚úÖ Mock data check completed"

  # =====================================================
  # VERIFICA√á√ïES DE SEGURAN√áA
  # =====================================================
  - repo: local
    hooks:
      # Verificar se n√£o h√° secrets ou tokens commitados
      - id: no-secrets
        name: No Secrets or Tokens
        entry: bash
        language: bash
        files: '.*\.(js|html|json|md)$'
        args:
          - -c
          - |
            echo "üîí Checking for secrets..."
            for file in $(git diff --cached --name-only | grep -E "\.(js|html|json|md)$"); do
              if [ -f "$file" ]; then
                # Verificar padr√µes de secrets comuns
                if grep -i "password\|secret\|key\|token" "$file" | grep -v "mock-jwt-token\|example\|placeholder\|demo"; then
                  echo "‚ö†Ô∏è  $file may contain sensitive information"
                  grep -in "password\|secret\|key\|token" "$file" | grep -v "mock-jwt-token\|example\|placeholder\|demo" | head -3
                fi
              fi
            done
            echo "‚úÖ Secrets check completed"

  # =====================================================
  # CONFIGURA√á√ÉO ESPEC√çFICA PARA PLAYWRIGHT
  # =====================================================
  - repo: local
    hooks:
      # Verificar se testes Playwright s√£o v√°lidos
      - id: playwright-test-validation
        name: Playwright Test Validation
        entry: bash
        language: bash
        files: 'tests/.*\.spec\.js$'
        args:
          - -c
          - |
            echo "üé≠ Validating Playwright tests..."
            for file in $(git diff --cached --name-only | grep "tests/.*\.spec\.js$"); do
              if [ -f "$file" ]; then
                # Verificar importa√ß√µes b√°sicas
                if ! grep -q "import.*@playwright/test" "$file"; then
                  echo "‚ùå $file missing Playwright test import"
                  exit 1
                fi
                # Verificar se tem test describe/test
                if ! grep -q "test\|describe" "$file"; then
                  echo "‚ùå $file missing test cases"
                  exit 1
                fi
                echo "‚úÖ $file Playwright test structure OK"
              fi
            done

# =====================================================
# CONFIGURA√á√ÉO GLOBAL
# =====================================================
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '2.20.0'

# Configura√ß√£o para CI
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false