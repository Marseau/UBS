/**
 * AUDITORIA: Capacidade de rastreamento de custos e usage-based metrics
 * Verifica se BD e frontend podem capturar m√©tricas de custo vs receita
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function auditCostTrackingCapabilities() {
    console.log('üîç AUDITORIA: Capacidade de rastreamento de custos\n');
    
    try {
        console.log('üìä M√âTRICAS CR√çTICAS NECESS√ÅRIAS:');
        console.log('1. üí∞ Custo de IA por tenant (tokens, requests)');
        console.log('2. üì± Custo de WhatsApp por tenant (mensagens)');
        console.log('3. üìà Margem real: Receita - Custos');
        console.log('4. üö® Tenants em preju√≠zo (custo > receita)');
        console.log('5. üìä Cost per conversation/interaction');
        
        console.log('\nüîç VERIFICANDO TABELAS DO BANCO...\n');
        
        // 1. Verificar conversation_history para dados de IA
        console.log('1. ü§ñ DADOS DE IA (conversation_history):');
        
        const { data: conversationSample, error: convError } = await supabase
            .from('conversation_history')
            .select('*')
            .limit(3);
            
        if (convError) {
            console.log('   ‚ùå Erro ao acessar conversation_history:', convError.message);
        } else if (conversationSample?.length > 0) {
            console.log('   ‚úÖ Tabela acess√≠vel');
            console.log('   üìã Campos dispon√≠veis:');
            Object.keys(conversationSample[0]).forEach(field => {
                console.log(`      - ${field}`);
            });
            
            // Verificar se tem campos de custo
            const costFields = ['tokens_used', 'cost', 'api_cost', 'token_count', 'usage_cost'];
            const hasCostTracking = costFields.some(field => 
                Object.keys(conversationSample[0]).includes(field)
            );
            
            console.log(`   üí∞ Rastreamento de custo: ${hasCostTracking ? '‚úÖ DISPON√çVEL' : '‚ùå FALTANDO'}`);
            
            if (!hasCostTracking) {
                console.log('   üí° Campos necess√°rios para adicionar:');
                console.log('      - tokens_used (INTEGER)');
                console.log('      - api_cost_usd (DECIMAL)');
                console.log('      - model_used (VARCHAR)');
            }
        } else {
            console.log('   ‚ö†Ô∏è Tabela vazia');
        }
        
        // 2. Verificar se h√° rastreamento de WhatsApp
        console.log('\n2. üì± DADOS DE WHATSAPP:');
        
        const { data: whatsappSample, error: whatsappError } = await supabase
            .from('whatsapp_media')
            .select('*')
            .limit(3);
            
        if (whatsappError) {
            console.log('   ‚ùå Tabela whatsapp_media n√£o encontrada');
        } else {
            console.log('   ‚úÖ Tabela whatsapp_media encontrada');
            if (whatsappSample?.length > 0) {
                console.log('   üìã Campos dispon√≠veis:');
                Object.keys(whatsappSample[0]).forEach(field => {
                    console.log(`      - ${field}`);
                });
            }
        }
        
        // Verificar se conversation_history tem origem WhatsApp
        if (conversationSample?.length > 0) {
            const hasWhatsAppTracking = Object.keys(conversationSample[0]).includes('source') ||
                                      Object.keys(conversationSample[0]).includes('channel') ||
                                      Object.keys(conversationSample[0]).includes('platform');
            console.log(`   üì± Rastreamento origem WhatsApp: ${hasWhatsAppTracking ? '‚úÖ DISPON√çVEL' : '‚ùå FALTANDO'}`);
        }
        
        // 3. Verificar dados de cobran√ßa/pricing
        console.log('\n3. üí≥ DADOS DE COBRAN√áA (tenants):');
        
        const { data: tenantsSample, error: tenantsError } = await supabase
            .from('tenants')
            .select('*')
            .limit(3);
            
        if (tenantsError) {
            console.log('   ‚ùå Erro ao acessar tenants:', tenantsError.message);
        } else if (tenantsSample?.length > 0) {
            console.log('   ‚úÖ Tabela acess√≠vel');
            
            const pricingFields = ['monthly_fee', 'subscription_amount', 'plan_price', 'billing_amount'];
            const hasPricingData = pricingFields.some(field => 
                Object.keys(tenantsSample[0]).includes(field)
            );
            
            console.log(`   üí∞ Dados de pre√ßo: ${hasPricingData ? '‚úÖ DISPON√çVEL' : '‚ùå FALTANDO'}`);
            
            console.log('   üìã Campos de tenant:');
            Object.keys(tenantsSample[0]).slice(0, 10).forEach(field => {
                console.log(`      - ${field}`);
            });
            
            if (!hasPricingData) {
                console.log('   üí° Campos necess√°rios para adicionar:');
                console.log('      - monthly_subscription_fee (DECIMAL)');
                console.log('      - plan_type (VARCHAR)');
                console.log('      - billing_date (DATE)');
            }
        }
        
        // 4. Verificar se existe tabela de custos
        console.log('\n4. üìä TABELA DE CUSTOS ESPEC√çFICA:');
        
        const { data: costsSample, error: costsError } = await supabase
            .from('usage_costs')
            .select('*')
            .limit(3);
            
        if (costsError) {
            console.log('   ‚ùå Tabela usage_costs n√£o encontrada');
            console.log('   üí° Precisaria criar tabela para rastreamento de custos');
        } else {
            console.log('   ‚úÖ Tabela usage_costs encontrada');
        }
        
        // 5. An√°lise do frontend
        console.log('\n5. üåê CAPACIDADE DO FRONTEND...');
        
        console.log('   üìä Dashboard atual:');
        console.log('      ‚úÖ Pode mostrar receita por tenant');
        console.log('      ‚ùå N√£o mostra custos por tenant');
        console.log('      ‚ùå N√£o calcula margem real');
        console.log('      ‚ùå N√£o identifica tenants em preju√≠zo');
        
        console.log('\nüìã RESUMO DA AUDITORIA:\n');
        
        // Estrutura do relat√≥rio
        const auditResults = {
            conversationData: {
                available: !convError && conversationSample?.length > 0,
                hasCostTracking: false,
                needsEnhancement: true
            },
            whatsappData: {
                available: !whatsappError,
                hasUsageTracking: false,
                needsEnhancement: true
            },
            pricingData: {
                available: !tenantsError && tenantsSample?.length > 0,
                hasPricingFields: false,
                needsEnhancement: true
            },
            costTable: {
                available: !costsError,
                needsCreation: !!costsError
            }
        };
        
        console.log('üîç STATUS ATUAL:');
        Object.entries(auditResults).forEach(([category, status]) => {
            const categoryName = {
                conversationData: 'Dados de Conversa√ß√£o/IA',
                whatsappData: 'Dados de WhatsApp',
                pricingData: 'Dados de Pre√ßos',
                costTable: 'Tabela de Custos'
            }[category];
            
            console.log(`   ${status.available ? '‚úÖ' : '‚ùå'} ${categoryName}`);
        });
        
        console.log('\nüí° RECOMENDA√á√ïES:\n');
        
        console.log('1. üèóÔ∏è ESTRUTURA DE DADOS NECESS√ÅRIA:');
        console.log('   - Adicionar campos de custo em conversation_history');
        console.log('   - Criar tabela usage_costs para rastreamento detalhado');
        console.log('   - Adicionar campos de pre√ßo em tenants');
        console.log('   - Rastrear origem das mensagens (WhatsApp vs outras)');
        
        console.log('\n2. üìä M√âTRICAS A IMPLEMENTAR:');
        console.log('   - Cost per tenant (IA + WhatsApp + infra)');
        console.log('   - Margem real (receita - custos)');
        console.log('   - ROI por tenant');
        console.log('   - Alertas de tenants em preju√≠zo');
        
        console.log('\n3. üåê FRONTEND ENHANCEMENTS:');
        console.log('   - Widget de "Tenants em Preju√≠zo"');
        console.log('   - Gr√°fico "Custo vs Receita" por tenant');
        console.log('   - Dashboard de "Sustainability Metrics"');
        console.log('   - Alertas de usage spikes');
        
        console.log('\nüöÄ PR√ìXIMOS PASSOS:');
        console.log('1. Criar estrutura de rastreamento de custos');
        console.log('2. Implementar logging de custos de IA');
        console.log('3. Adicionar m√©tricas de margem nas fun√ß√µes');
        console.log('4. Criar dashboard de sustentabilidade');
        
    } catch (error) {
        console.error('‚ùå Erro na auditoria:', error);
    }
}

auditCostTrackingCapabilities().catch(console.error);