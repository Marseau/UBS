/**
 * VERIFICA√á√ÉO DETALHADA: services_available nas m√©tricas
 */

async function checkServicesDetailed() {
    console.log('üîç VERIFICA√á√ÉO DETALHADA: services_available');
    
    const { getAdminClient } = require('./dist/config/database.js');
    const client = getAdminClient();
    
    try {
        // Get latest metrics
        const { data: latestMetric } = await client
            .from('tenant_metrics')
            .select('tenant_id, metric_data, calculated_at, tenants!inner(business_name)')
            .order('calculated_at', { ascending: false })
            .limit(1)
            .single();
            
        if (!latestMetric) {
            console.log('‚ùå Nenhuma m√©trica encontrada');
            return;
        }
        
        const businessName = latestMetric.tenants?.business_name || 'N/A';
        console.log(`üéØ Verificando: ${businessName}`);
        console.log(`   Data: ${new Date(latestMetric.calculated_at).toLocaleString('pt-BR')}`);
        
        // Check services_available in metric_data
        const servicesAvailable = latestMetric.metric_data?.services_available;
        
        console.log('\nüìä METRIC_DATA services_available:');
        console.log(JSON.stringify(servicesAvailable, null, 2));
        
        console.log('\nüîç DETALHES:');
        console.log(`   Type: ${typeof servicesAvailable}`);
        console.log(`   services type: ${typeof servicesAvailable?.services}`);
        console.log(`   services length: ${servicesAvailable?.services?.length || 'N/A'}`);
        console.log(`   count: ${servicesAvailable?.count || 'N/A'}`);
        
        if (Array.isArray(servicesAvailable?.services)) {
            console.log('\nüìã ARRAY DE SERVI√áOS:');
            if (servicesAvailable.services.length > 0) {
                servicesAvailable.services.forEach((service, idx) => {
                    console.log(`   ${idx + 1}. ${service} (type: ${typeof service})`);
                });
            } else {
                console.log('   ‚ö†Ô∏è Array vazio');
            }
        } else {
            console.log('\n‚ùå services N√ÉO √© um array v√°lido');
        }
        
        // Compare with direct table query
        console.log('\nüîç COMPARA√á√ÉO com tabela services:');
        const { data: directServices } = await client
            .from('services')
            .select('name')
            .eq('tenant_id', latestMetric.tenant_id)
            .eq('is_active', true);
            
        console.log(`   Tabela services: ${directServices?.length || 0} servi√ßos`);
        directServices?.forEach((service, idx) => {
            console.log(`   ${idx + 1}. ${service.name}`);
        });
        
        // Check if correction was applied by looking at the file
        console.log('\nüîç VERIFICA√á√ÉO DO C√ìDIGO:');
        const fs = require('fs');
        try {
            const fileContent = fs.readFileSync('./src/services/tenant-metrics/validated-metrics-calculator.service.ts', 'utf8');
            const hasCorrection = fileContent.includes('.eq(\'is_active\', true)');
            console.log(`   C√≥digo corrigido: ${hasCorrection ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
            
            if (hasCorrection) {
                console.log('   A corre√ß√£o est√° no c√≥digo fonte');
            } else {
                console.log('   A corre√ß√£o N√ÉO est√° aplicada no c√≥digo');
            }
        } catch (fileError) {
            console.log(`   Erro lendo arquivo: ${fileError.message}`);
        }
        
    } catch (error) {
        console.log('‚ùå Erro:', error.message);
    }
}

checkServicesDetailed().catch(console.error);