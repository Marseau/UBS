#!/bin/bash

# üöÄ Script de Deploy Automatizado para Produ√ß√£o
# Uso: ./scripts/deploy-production.sh

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
PROJECT_DIR="/var/www/WhatsAppSalon-N8N"
BACKUP_DIR="/var/backups/whatsapp-salon"
PM2_PROCESS_NAME="universal-booking-system"
HEALTH_CHECK_URL="http://localhost:3000/api/health"

echo -e "${BLUE}üöÄ ========== DEPLOY PRODUCTION ==========${NC}"
echo -e "${BLUE}üìÖ Data: $(date '+%Y-%m-%d %H:%M:%S')${NC}"
echo ""

# 1. Verificar se est√° no servidor de produ√ß√£o
echo -e "${YELLOW}üîç Verificando ambiente...${NC}"
if [ ! -d "$PROJECT_DIR" ]; then
    echo -e "${RED}‚ùå Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Executando deploy localmente (desenvolvimento)${NC}"
    PROJECT_DIR="."
fi

cd "$PROJECT_DIR"
echo -e "${GREEN}‚úÖ Diret√≥rio: $(pwd)${NC}"

# 2. Criar backup do c√≥digo atual
echo -e "${YELLOW}üì¶ Criando backup do c√≥digo atual...${NC}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/backup_$TIMESTAMP.tar.gz"

mkdir -p "$BACKUP_DIR"
tar -czf "$BACKUP_FILE" \
    --exclude='node_modules' \
    --exclude='dist' \
    --exclude='.git' \
    --exclude='logs' \
    . 2>/dev/null || true

if [ -f "$BACKUP_FILE" ]; then
    echo -e "${GREEN}‚úÖ Backup criado: $BACKUP_FILE${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Backup n√£o criado (pode n√£o ter permiss√µes)${NC}"
fi

# 3. Verificar se h√° mudan√ßas no Git
echo -e "${YELLOW}üîç Verificando mudan√ßas no Git...${NC}"
git fetch origin main

CURRENT_COMMIT=$(git rev-parse HEAD)
REMOTE_COMMIT=$(git rev-parse origin/main)

if [ "$CURRENT_COMMIT" = "$REMOTE_COMMIT" ]; then
    echo -e "${GREEN}‚úÖ J√° est√° na vers√£o mais recente${NC}"
    echo -e "${YELLOW}ü§î Deseja fazer rebuild mesmo assim? (y/n)${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üõë Deploy cancelado${NC}"
        exit 0
    fi
else
    echo -e "${YELLOW}üì• H√° novas mudan√ßas dispon√≠veis${NC}"
    echo -e "${BLUE}   Current: ${CURRENT_COMMIT:0:8}${NC}"
    echo -e "${BLUE}   Remote:  ${REMOTE_COMMIT:0:8}${NC}"
fi

# 4. Salvar status do servi√ßo antes de parar
echo -e "${YELLOW}üíæ Salvando status do servi√ßo...${NC}"
SERVICE_WAS_RUNNING=false
if pm2 show "$PM2_PROCESS_NAME" &>/dev/null; then
    SERVICE_WAS_RUNNING=true
    echo -e "${GREEN}‚úÖ Servi√ßo est√° rodando${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Servi√ßo n√£o est√° rodando no PM2${NC}"
fi

# 5. Puxar mudan√ßas do GitHub
echo -e "${YELLOW}üì• Puxando mudan√ßas do GitHub...${NC}"
git pull origin main

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro ao fazer git pull${NC}"
    echo -e "${YELLOW}üîÑ Tentando rollback...${NC}"
    git reset --hard "$CURRENT_COMMIT"
    exit 1
fi
echo -e "${GREEN}‚úÖ C√≥digo atualizado com sucesso${NC}"

# 6. Verificar se h√° novas depend√™ncias
echo -e "${YELLOW}üì¶ Verificando depend√™ncias...${NC}"
if git diff --name-only "$CURRENT_COMMIT" HEAD | grep -q "package.json"; then
    echo -e "${YELLOW}üîÑ package.json modificado - instalando depend√™ncias...${NC}"
    npm install
    echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
else
    echo -e "${GREEN}‚úÖ Nenhuma mudan√ßa em depend√™ncias${NC}"
fi

# 7. Fazer build do TypeScript
echo -e "${YELLOW}üî® Fazendo build do TypeScript...${NC}"
npm run build

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erro no build do TypeScript${NC}"
    echo -e "${YELLOW}üîÑ Fazendo rollback...${NC}"
    git reset --hard "$CURRENT_COMMIT"
    npm install
    npm run build
    exit 1
fi
echo -e "${GREEN}‚úÖ Build conclu√≠do com sucesso${NC}"

# 8. Reiniciar o servi√ßo PM2
echo -e "${YELLOW}üîÑ Reiniciando servi√ßo...${NC}"

if [ "$SERVICE_WAS_RUNNING" = true ]; then
    pm2 restart "$PM2_PROCESS_NAME"
    echo -e "${GREEN}‚úÖ Servi√ßo reiniciado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Servi√ßo n√£o estava rodando - iniciando agora...${NC}"
    pm2 start dist/index.js --name "$PM2_PROCESS_NAME"
    pm2 save
    echo -e "${GREEN}‚úÖ Servi√ßo iniciado${NC}"
fi

# 9. Aguardar alguns segundos para o servidor iniciar
echo -e "${YELLOW}‚è≥ Aguardando servidor iniciar...${NC}"
sleep 5

# 10. Verificar health check
echo -e "${YELLOW}üè• Verificando health check...${NC}"
MAX_RETRIES=10
RETRY_COUNT=0

while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
    if curl -s -f "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Health check passou!${NC}"
        echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
        echo ""
        echo -e "${BLUE}üìä Status do servi√ßo:${NC}"
        pm2 show "$PM2_PROCESS_NAME" 2>/dev/null || echo "PM2 n√£o dispon√≠vel"
        echo ""
        echo -e "${BLUE}üìù Logs recentes:${NC}"
        pm2 logs "$PM2_PROCESS_NAME" --lines 10 --nostream 2>/dev/null || echo "Logs n√£o dispon√≠veis"
        echo ""
        echo -e "${GREEN}‚úÖ ubs.app.br est√° atualizado!${NC}"
        exit 0
    fi

    RETRY_COUNT=$((RETRY_COUNT + 1))
    echo -e "${YELLOW}‚è≥ Tentativa $RETRY_COUNT/$MAX_RETRIES...${NC}"
    sleep 3
done

# 11. Health check falhou - fazer rollback
echo -e "${RED}‚ùå Health check falhou ap√≥s $MAX_RETRIES tentativas${NC}"
echo -e "${YELLOW}üîÑ Fazendo rollback autom√°tico...${NC}"

git reset --hard "$CURRENT_COMMIT"
npm install
npm run build
pm2 restart "$PM2_PROCESS_NAME"

echo -e "${RED}‚ùå Deploy falhou e rollback foi executado${NC}"
echo -e "${YELLOW}üìã Verifique os logs: pm2 logs $PM2_PROCESS_NAME${NC}"
exit 1
