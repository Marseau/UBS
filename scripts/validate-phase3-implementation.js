#!/usr/bin/env node

/**
 * üéØ FASE 3: Script de Valida√ß√£o Automatizada Independente de Credenciais
 *
 * Valida implementa√ß√£o Phase 3 sem necessidade de credenciais espec√≠ficas do Supabase
 * Verifica estrutura de c√≥digo, tipos, imports e padr√µes arquiteturais
 *
 * Uso: node scripts/validate-phase3-implementation.js
 */

const fs = require('fs');
const path = require('path');

class Phase3Validator {
  constructor() {
    this.projectRoot = path.resolve(__dirname, '..');
    this.errors = [];
    this.warnings = [];
    this.successes = [];
  }

  log(type, message, file = null) {
    const entry = { message, file, timestamp: new Date().toISOString() };
    switch (type) {
      case 'error':
        this.errors.push(entry);
        console.error(`‚ùå ERROR: ${message}${file ? ` (${file})` : ''}`);
        break;
      case 'warning':
        this.warnings.push(entry);
        console.warn(`‚ö†Ô∏è  WARNING: ${message}${file ? ` (${file})` : ''}`);
        break;
      case 'success':
        this.successes.push(entry);
        console.log(`‚úÖ SUCCESS: ${message}${file ? ` (${file})` : ''}`);
        break;
      default:
        console.log(`‚ÑπÔ∏è  INFO: ${message}${file ? ` (${file})` : ''}`);
    }
  }

  readFile(filePath) {
    try {
      const fullPath = path.join(this.projectRoot, filePath);
      if (!fs.existsSync(fullPath)) {
        this.log('error', `File not found: ${filePath}`, filePath);
        return null;
      }
      return fs.readFileSync(fullPath, 'utf8');
    } catch (error) {
      this.log('error', `Error reading file: ${error.message}`, filePath);
      return null;
    }
  }

  checkFileExists(filePath) {
    const fullPath = path.join(this.projectRoot, filePath);
    return fs.existsSync(fullPath);
  }

  // ‚úÖ VALIDA√á√ÉO 1: Estrutura de tipos Phase 3
  validateTypesStructure() {
    console.log('\nüîç Validando estrutura de tipos Phase 3...');

    const typesPath = 'src/types/flow-lock.types.ts';
    const content = this.readFile(typesPath);

    if (!content) return;

    // Verificar UnifiedConversationContext como interface principal
    if (content.includes('export interface UnifiedConversationContext')) {
      this.log('success', 'UnifiedConversationContext interface definida', typesPath);
    } else {
      this.log('error', 'UnifiedConversationContext interface n√£o encontrada', typesPath);
    }

    // Verificar alias de compatibilidade
    if (content.includes('export type EnhancedConversationContext = UnifiedConversationContext')) {
      this.log('success', 'Alias de compatibilidade EnhancedConversationContext criado', typesPath);
    } else {
      this.log('error', 'Alias de compatibilidade EnhancedConversationContext n√£o encontrado', typesPath);
    }

    // Verificar campos cr√≠ticos restaurados
    const criticalFields = [
      'temporal_context',
      'timeout_stage',
      'session_timeout_warnings',
      'flow_lock_history',
      'flow_metrics',
      'recovery_attempts',
      'data_collection_state',
      'unified_context_ref'
    ];

    criticalFields.forEach(field => {
      if (content.includes(`${field}?:`)) {
        this.log('success', `Campo cr√≠tico '${field}' presente na interface`, typesPath);
      } else {
        this.log('error', `Campo cr√≠tico '${field}' ausente na interface`, typesPath);
      }
    });
  }

  // ‚úÖ VALIDA√á√ÉO 2: Helper consolidado
  validateConversationContextHelper() {
    console.log('\nüîç Validando helper consolidado...');

    const helperPath = 'src/utils/conversation-context-helper.ts';
    const content = this.readFile(helperPath);

    if (!content) return;

    // Verificar fun√ß√£o principal mergeUnifiedContext
    if (content.includes('export async function mergeUnifiedContext(')) {
      this.log('success', 'Fun√ß√£o mergeUnifiedContext presente', helperPath);
    } else {
      this.log('error', 'Fun√ß√£o mergeUnifiedContext n√£o encontrada', helperPath);
    }

    // Verificar l√≥gica de resolu√ß√£o de session_id
    if (content.includes('sessionId = existingContext?.context_data?.session_metadata?.session_id || uuidv4()')) {
      this.log('success', 'L√≥gica de resolu√ß√£o de session_id implementada', helperPath);
    } else {
      this.log('warning', 'L√≥gica de resolu√ß√£o de session_id pode estar inconsistente', helperPath);
    }

    // Verificar cria√ß√£o real de usu√°rio (n√£o UUID tempor√°rio)
    if (content.includes('from(\'users\')') && content.includes('insert({')) {
      this.log('success', 'Cria√ß√£o real de usu√°rio implementada', helperPath);
    } else {
      this.log('error', 'Cria√ß√£o real de usu√°rio n√£o encontrada - risco de FK violation', helperPath);
    }

    // Verificar opera√ß√µes diretas no unified_conversation_contexts
    if (content.includes('unified_conversation_contexts') && content.includes('(supabaseAdmin as any)')) {
      this.log('success', 'Opera√ß√µes diretas na tabela unified_conversation_contexts', helperPath);
    } else {
      this.log('error', 'Opera√ß√µes diretas na tabela unificada n√£o encontradas', helperPath);
    }

    // Verificar fun√ß√µes depreciadas com wrapper
    if (content.includes('@deprecated') && content.includes('mergeEnhancedConversationContext')) {
      this.log('success', 'Fun√ß√µes depreciadas com wrapper de compatibilidade', helperPath);
    } else {
      this.log('warning', 'Fun√ß√µes depreciadas podem n√£o ter wrapper adequado', helperPath);
    }
  }

  // ‚úÖ VALIDA√á√ÉO 3: Marca√ß√£o de depreca√ß√£o
  validateDeprecationPatterns() {
    console.log('\nüîç Validando padr√µes de deprecia√ß√£o...');

    const deprecatedFiles = [
      'src/utils/unified-context-helper.ts',
      'src/services/unified-context-manager.service.ts'
    ];

    deprecatedFiles.forEach(filePath => {
      const content = this.readFile(filePath);
      if (!content) return;

      if (content.includes('@deprecated') || content.includes('ESTE SERVI√áO FOI ABSORVIDO')) {
        this.log('success', 'Arquivo marcado como depreciado adequadamente', filePath);
      } else {
        this.log('warning', 'Arquivo n√£o marcado como depreciado', filePath);
      }

      // Verificar se ainda tem implementa√ß√£o ativa
      if (content.includes('export class') && !content.includes('@deprecated')) {
        this.log('warning', 'Classe ativa em arquivo que deveria estar depreciado', filePath);
      }
    });
  }

  // ‚úÖ VALIDA√á√ÉO 4: Integra√ß√£o do orchestrator
  validateOrchestratorIntegration() {
    console.log('\nüîç Validando integra√ß√£o do orchestrator...');

    const orchestratorPath = 'src/services/orchestrator/orchestrator-core.service.ts';
    const content = this.readFile(orchestratorPath);

    if (!content) return;

    // Verificar import correto
    if (content.includes("import { mergeUnifiedContext } from '../../utils/conversation-context-helper'")) {
      this.log('success', 'Import do mergeUnifiedContext correto no orchestrator', orchestratorPath);
    } else {
      this.log('error', 'Import do mergeUnifiedContext n√£o encontrado no orchestrator', orchestratorPath);
    }

    // Verificar que n√£o usa mais unifiedContextManager
    if (!content.includes('unifiedContextManager')) {
      this.log('success', 'unifiedContextManager removido do orchestrator', orchestratorPath);
    } else {
      this.log('warning', 'unifiedContextManager ainda presente no orchestrator', orchestratorPath);
    }
  }

  // ‚úÖ VALIDA√á√ÉO 5: ConversationHistoryPersistence simplificado
  validateConversationHistoryPersistence() {
    console.log('\nüîç Validando ConversationHistoryPersistence simplificado...');

    const persistencePath = 'src/services/conversation-history-persistence.service.ts';
    const content = this.readFile(persistencePath);

    if (!content) return;

    // Verificar uso do mergeUnifiedContext
    if (content.includes('mergeUnifiedContext')) {
      this.log('success', 'ConversationHistoryPersistence usa mergeUnifiedContext', persistencePath);
    } else {
      this.log('error', 'ConversationHistoryPersistence n√£o usa mergeUnifiedContext', persistencePath);
    }

    // Verificar resolu√ß√£o de userId
    if (content.includes('resolveUserId') || content.includes('userPhone')) {
      this.log('success', 'Resolu√ß√£o de userId implementada', persistencePath);
    } else {
      this.log('warning', 'Resolu√ß√£o de userId pode estar ausente', persistencePath);
    }

    // Verificar constru√ß√£o de contexto m√≠nimo
    if (content.includes('buildConversationContext') && content.includes('session_id') && content.includes('duration_minutes')) {
      this.log('success', 'Constru√ß√£o de contexto m√≠nimo implementada', persistencePath);
    } else {
      this.log('error', 'Constru√ß√£o de contexto m√≠nimo n√£o encontrada', persistencePath);
    }
  }

  // ‚úÖ VALIDA√á√ÉO 6: Verificar imports de sistema unificado
  validateUnifiedImports() {
    console.log('\nüîç Validando imports do sistema unificado...');

    const filesToCheck = [
      'src/services/orchestrator/telemetry-orchestrator.ts',
      'src/services/conversation-outcome-analyzer.service.ts',
      'src/services/flow-lock-manager.service.ts'
    ];

    filesToCheck.forEach(filePath => {
      const content = this.readFile(filePath);
      if (!content) return;

      // Verificar se usa mergeUnifiedContext
      if (content.includes('mergeUnifiedContext')) {
        this.log('success', 'Arquivo migrado para mergeUnifiedContext', filePath);
      } else if (content.includes('unifiedContextManager') || content.includes('UnifiedContextManager')) {
        this.log('warning', 'Arquivo ainda usa unifiedContextManager depreciado', filePath);
      } else {
        this.log('info', 'Arquivo n√£o usa sistema de contexto unificado', filePath);
      }
    });
  }

  // ‚úÖ VALIDA√á√ÉO 7: Verificar estrutura de package.json e depend√™ncias
  validateProjectConfiguration() {
    console.log('\nüîç Validando configura√ß√£o do projeto...');

    const packagePath = 'package.json';
    const content = this.readFile(packagePath);

    if (!content) return;

    try {
      const packageJson = JSON.parse(content);

      // Verificar depend√™ncias essenciais
      const essentialDeps = ['@supabase/supabase-js', 'uuid'];
      essentialDeps.forEach(dep => {
        if (packageJson.dependencies?.[dep] || packageJson.devDependencies?.[dep]) {
          this.log('success', `Depend√™ncia essencial '${dep}' presente`, packagePath);
        } else {
          this.log('error', `Depend√™ncia essencial '${dep}' ausente`, packagePath);
        }
      });

      // Verificar scripts de valida√ß√£o
      if (packageJson.scripts?.build) {
        this.log('success', 'Script de build presente', packagePath);
      } else {
        this.log('error', 'Script de build ausente', packagePath);
      }

    } catch (error) {
      this.log('error', `Erro ao parsear package.json: ${error.message}`, packagePath);
    }
  }

  // ‚úÖ VALIDA√á√ÉO 8: Verificar tipos TypeScript
  validateTypeScriptConfiguration() {
    console.log('\nüîç Validando configura√ß√£o TypeScript...');

    const tsconfigPath = 'tsconfig.json';
    const content = this.readFile(tsconfigPath);

    if (!content) return;

    try {
      const tsconfig = JSON.parse(content);

      if (tsconfig.compilerOptions?.strict) {
        this.log('success', 'TypeScript strict mode habilitado', tsconfigPath);
      } else {
        this.log('warning', 'TypeScript strict mode n√£o habilitado', tsconfigPath);
      }

      if (tsconfig.compilerOptions?.paths) {
        this.log('success', 'Path aliases configurados', tsconfigPath);
      } else {
        this.log('info', 'Path aliases n√£o configurados', tsconfigPath);
      }

    } catch (error) {
      this.log('error', `Erro ao parsear tsconfig.json: ${error.message}`, tsconfigPath);
    }
  }

  // ‚úÖ VALIDA√á√ÉO 9: Verificar se ainda existem padr√µes problem√°ticos
  validateAntiPatterns() {
    console.log('\nüîç Verificando anti-padr√µes...');

    const filesToCheck = [
      'src/utils/conversation-context-helper.ts',
      'src/services/conversation-history-persistence.service.ts',
      'src/services/orchestrator/orchestrator-core.service.ts'
    ];

    const antiPatterns = [
      { pattern: /uuid\(\).*userId/gi, message: 'UUID tempor√°rio usado como userId' },
      { pattern: /user_id.*userPhone/gi, message: 'userPhone enviado como user_id' },
      { pattern: /updateContextData\([^,]*,\s*[^,]*,\s*{}\)/gi, message: 'updateContextData com par√¢metros vazios' },
      { pattern: /TODO|FIXME|HACK/gi, message: 'C√≥digo tempor√°rio ou coment√°rios de TODO' }
    ];

    filesToCheck.forEach(filePath => {
      const content = this.readFile(filePath);
      if (!content) return;

      antiPatterns.forEach(({ pattern, message }) => {
        if (pattern.test(content)) {
          this.log('warning', `Anti-padr√£o detectado: ${message}`, filePath);
        }
      });
    });
  }

  // ‚úÖ VALIDA√á√ÉO 10: Verificar consist√™ncia de session_id
  validateSessionIdConsistency() {
    console.log('\nüîç Verificando consist√™ncia de session_id...');

    const helperPath = 'src/utils/conversation-context-helper.ts';
    const content = this.readFile(helperPath);

    if (!content) return;

    // Verificar l√≥gica de busca de session_id existente
    if (content.includes('existingContext?.context_data?.session_metadata?.session_id')) {
      this.log('success', 'L√≥gica de busca de session_id existente implementada', helperPath);
    } else {
      this.log('error', 'L√≥gica de busca de session_id existente n√£o encontrada', helperPath);
    }

    // Verificar que session_id n√£o √© sempre gerado novo
    if (content.includes('uuidv4()') && content.includes('sessionId = updates.session_id')) {
      this.log('success', 'session_id reutiliza existente antes de gerar novo', helperPath);
    } else {
      this.log('warning', 'L√≥gica de session_id pode estar gerando sempre novos IDs', helperPath);
    }
  }

  // ‚úÖ EXECUTAR TODAS AS VALIDA√á√ïES
  async runAllValidations() {
    console.log('üéØ INICIANDO VALIDA√á√ÉO AUTOMATIZADA PHASE 3');
    console.log('=' .repeat(60));

    this.validateTypesStructure();
    this.validateConversationContextHelper();
    this.validateDeprecationPatterns();
    this.validateOrchestratorIntegration();
    this.validateConversationHistoryPersistence();
    this.validateUnifiedImports();
    this.validateProjectConfiguration();
    this.validateTypeScriptConfiguration();
    this.validateAntiPatterns();
    this.validateSessionIdConsistency();

    this.generateReport();
  }

  generateReport() {
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RELAT√ìRIO DE VALIDA√á√ÉO PHASE 3');
    console.log('=' .repeat(60));

    console.log(`\n‚úÖ Sucessos: ${this.successes.length}`);
    console.log(`‚ö†Ô∏è  Avisos: ${this.warnings.length}`);
    console.log(`‚ùå Erros: ${this.errors.length}`);

    const total = this.successes.length + this.warnings.length + this.errors.length;
    const successRate = total > 0 ? ((this.successes.length / total) * 100).toFixed(1) : 0;

    console.log(`\nüìà Taxa de Sucesso: ${successRate}%`);

    if (this.errors.length > 0) {
      console.log('\n‚ùå ERROS CR√çTICOS QUE PRECISAM SER CORRIGIDOS:');
      this.errors.forEach((error, index) => {
        console.log(`${index + 1}. ${error.message}${error.file ? ` (${error.file})` : ''}`);
      });
    }

    if (this.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  AVISOS PARA REVIS√ÉO:');
      this.warnings.forEach((warning, index) => {
        console.log(`${index + 1}. ${warning.message}${warning.file ? ` (${warning.file})` : ''}`);
      });
    }

    // Determinar status geral
    let status = 'üü¢ APROVADO';
    if (this.errors.length > 0) {
      status = 'üî¥ REPROVADO - Erros cr√≠ticos encontrados';
    } else if (this.warnings.length > 3) {
      status = 'üü° APROVADO COM RESSALVAS - Muitos avisos';
    }

    console.log(`\nüéØ STATUS FINAL: ${status}`);

    // Salvar relat√≥rio em arquivo
    this.saveReport();
  }

  saveReport() {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        successes: this.successes.length,
        warnings: this.warnings.length,
        errors: this.errors.length,
        successRate: ((this.successes.length / (this.successes.length + this.warnings.length + this.errors.length)) * 100).toFixed(1)
      },
      details: {
        successes: this.successes,
        warnings: this.warnings,
        errors: this.errors
      }
    };

    const reportPath = path.join(this.projectRoot, 'validation-report-phase3.json');
    try {
      fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
      console.log(`\nüíæ Relat√≥rio salvo em: validation-report-phase3.json`);
    } catch (error) {
      console.error(`‚ùå Erro ao salvar relat√≥rio: ${error.message}`);
    }
  }
}

// Executar valida√ß√£o se chamado diretamente
if (require.main === module) {
  const validator = new Phase3Validator();
  validator.runAllValidations()
    .then(() => {
      process.exit(validator.errors.length > 0 ? 1 : 0);
    })
    .catch(error => {
      console.error('‚ùå Erro durante valida√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = Phase3Validator;