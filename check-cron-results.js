/**
 * VERIFICAR RESULTADOS: Cron job tenant_metrics
 */

async function checkCronResults() {
    console.log('üîç VERIFICANDO RESULTADOS DO CRON JOB');
    
    try {
        const { getAdminClient } = require('./dist/config/database.js');
        const client = getAdminClient();
        
        // STEP 1: Count total records
        console.log('\nüìä CONTAGEM GERAL...');
        
        const { count: totalCount } = await client
            .from('tenant_metrics')
            .select('*', { count: 'exact', head: true });
            
        console.log(`üìà Total de registros em tenant_metrics: ${totalCount || 0}`);
        
        // STEP 2: Group by periods
        const { data: periodCounts } = await client
            .from('tenant_metrics')
            .select('period, metric_type')
            .order('calculated_at', { ascending: false })
            .limit(50);
            
        const periodStats = {};
        periodCounts?.forEach(record => {
            const key = `${record.period}-${record.metric_type}`;
            periodStats[key] = (periodStats[key] || 0) + 1;
        });
        
        console.log('\nüìã Por per√≠odo/tipo:');
        Object.entries(periodStats).forEach(([key, count]) => {
            console.log(`   ${key}: ${count} registros`);
        });
        
        // STEP 3: Most recent records
        console.log('\n‚è∞ √öLTIMOS REGISTROS...');
        
        const { data: recentRecords } = await client
            .from('tenant_metrics')
            .select('tenant_id, metric_type, period, calculated_at, tenants!inner(business_name)')
            .order('calculated_at', { ascending: false })
            .limit(10);
            
        recentRecords?.forEach((record, idx) => {
            const time = new Date(record.calculated_at).toLocaleString('pt-BR');
            const businessName = record.tenants?.business_name || 'N/A';
            console.log(`   ${idx + 1}. ${businessName} | ${record.period} | ${time}`);
        });
        
        // STEP 4: Check function get_tenant_services_count_by_period is working
        console.log('\nüîß VALIDA√á√ÉO DA FUN√á√ÉO...');
        
        const testTenant = recentRecords?.[0];
        if (testTenant) {
            try {
                const { data: functionResult } = await client.rpc('get_tenant_services_count_by_period', {
                    p_tenant_id: testTenant.tenant_id,
                    p_period_type: '30d'
                });
                
                console.log(`‚úÖ get_tenant_services_count_by_period para ${testTenant.tenants.business_name}: ${functionResult} servi√ßos`);
                
                // Check if this data is in the metrics
                const { data: metricsData } = await client
                    .from('tenant_metrics')
                    .select('metric_data')
                    .eq('tenant_id', testTenant.tenant_id)
                    .eq('period', '30d')
                    .eq('metric_type', 'comprehensive')
                    .order('calculated_at', { ascending: false })
                    .limit(1)
                    .single();
                    
                if (metricsData?.metric_data?.services_count) {
                    console.log(`‚úÖ Dados na tabela tenant_metrics: ${metricsData.metric_data.services_count} servi√ßos`);
                    
                    if (functionResult === metricsData.metric_data.services_count) {
                        console.log('‚úÖ PERFEITO: Fun√ß√£o e tabela est√£o sincronizadas!');
                    } else {
                        console.log('‚ö†Ô∏è DIFEREN√áA: Fun√ß√£o e tabela t√™m valores diferentes');
                    }
                } else {
                    console.log('‚ö†Ô∏è services_count n√£o encontrado nos dados da m√©trica');
                }
                
            } catch (funcError) {
                console.log(`‚ùå Erro testando fun√ß√£o: ${funcError.message}`);
            }
        }
        
        // STEP 5: Summary
        console.log('\nüéØ RESUMO FINAL:');
        console.log(`   üìä Total registros: ${totalCount || 0}`);
        console.log(`   üè¢ Tenants processados: ${Object.keys(periodStats).length > 0 ? 'M√∫ltiplos' : 'Nenhum'}`);
        console.log(`   ‚è∞ √öltimo update: ${recentRecords?.[0]?.calculated_at ? new Date(recentRecords[0].calculated_at).toLocaleString('pt-BR') : 'N/A'}`);
        
        if ((totalCount || 0) > 30) {
            console.log('\nüéâ SUCESSO: Cron job est√° funcionando!');
            console.log('‚úÖ A fun√ß√£o get_tenant_services_count_by_period N√ÉO tinha problema');
            console.log('‚úÖ O sistema est√° populando tenant_metrics corretamente'); 
            console.log('‚úÖ Dados est√£o sendo atualizados em tempo real');
        } else {
            console.log('\n‚ö†Ô∏è Status incerto - poucas atualiza√ß√µes recentes');
        }
        
    } catch (error) {
        console.error('‚ùå ERRO:', error);
    }
}

checkCronResults().catch(console.error);