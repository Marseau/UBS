#!/usr/bin/env node

/**
 * SCRIPT PARA VERIFICAR A L√ìGICA DE FILTRO
 * Confirmar se est√° filtrando por created_at vs appointment_date
 */

const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  'https://qsdfyffuonywmtnlycri.supabase.co',
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function verifyFilterLogic() {
  console.log('ÔøΩÔøΩ VERIFICANDO L√ìGICA DE FILTRO');
  console.log('='.repeat(50));
  
  const endDate = new Date();
  const startDate = new Date();
  startDate.setDate(startDate.getDate() - 30);
  
  console.log(`ÔøΩÔøΩ Per√≠odo de an√°lise: ${startDate.toISOString().split('T')[0]} at√© ${endDate.toISOString().split('T')[0]}`);
  
  try {
    // 1. Verificar appointments CRIADOS no per√≠odo (correto)
    console.log('\nüîç 1. Appointments CRIADOS no per√≠odo (created_at)...');
    
    const { data: createdInPeriod, error: createdError } = await supabase
      .from('appointments')
      .select('id, tenant_id, final_price, created_at, appointment_date, status')
      .gte('created_at', startDate.toISOString())
      .lte('created_at', endDate.toISOString())
      .order('created_at', { ascending: false });
    
    if (createdError) {
      console.error('‚ùå Erro ao buscar appointments criados:', createdError);
      return;
    }
    
    console.log(`‚úÖ Appointments CRIADOS no per√≠odo: ${createdInPeriod?.length || 0}`);
    
    // 2. Verificar appointments COM DATA FUTURA no per√≠odo
    console.log('\nüîç 2. Appointments COM DATA FUTURA no per√≠odo...');
    
    const { data: futureAppointments, error: futureError } = await supabase
      .from('appointments')
      .select('id, tenant_id, final_price, created_at, appointment_date, status')
      .gte('appointment_date', endDate.toISOString())
      .order('appointment_date', { ascending: false });
    
    if (futureError) {
      console.error('‚ùå Erro ao buscar appointments futuros:', futureError);
      return;
    }
    
    console.log(`‚ö†Ô∏è Appointments COM DATA FUTURA: ${futureAppointments?.length || 0}`);
    
    // 3. Verificar interse√ß√£o (problema!)
    console.log('\nÔøΩÔøΩ 3. Verificando interse√ß√£o (PROBLEMA!)...');
    
    const createdIds = new Set(createdInPeriod?.map(app => app.id) || []);
    const futureIds = new Set(futureAppointments?.map(app => app.id) || []);
    
    const intersection = [...createdIds].filter(id => futureIds.has(id));
    
    console.log(`‚ùå Appointments CRIADOS no per√≠odo E COM DATA FUTURA: ${intersection.length}`);
    
    if (intersection.length > 0) {
      console.log('üìä Exemplos de appointments problem√°ticos:');
      const problematicApps = createdInPeriod?.filter(app => intersection.includes(app.id)).slice(0, 5) || [];
      
      problematicApps.forEach(app => {
        console.log(`   ID: ${app.id}`);
        console.log(`   Criado em: ${app.created_at}`);
        console.log(`   Data do agendamento: ${app.appointment_date}`);
        console.log(`   Status: ${app.status}`);
        console.log(`   Price: R$ ${app.final_price || 0}`);
        console.log('   ---');
      });
    }
    
    // 4. Calcular m√©tricas corretas
    console.log('\nÔøΩÔøΩ 4. M√©tricas corretas (apenas criados no per√≠odo):');
    
    const correctRevenue = createdInPeriod?.reduce((sum, app) => sum + (app.final_price || 0), 0) || 0;
    const correctAppointments = createdInPeriod?.length || 0;
    const correctCustomers = new Set(createdInPeriod?.map(app => app.user_id).filter(id => id) || []).size;
    
    console.log(`   Revenue: R$ ${correctRevenue.toFixed(2)}`);
    console.log(`   Appointments: ${correctAppointments}`);
    console.log(`   Customers: ${correctCustomers}`);
    
    console.log('\nüéØ CONCLUS√ÉO:');
    console.log('   A fun√ß√£o deve filtrar por created_at (quando foi criado)');
    console.log('   N√ÉO por appointment_date (data do agendamento)');
    console.log('   Appointments futuros s√£o normais, mas devem ser filtrados corretamente');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
  }
}

verifyFilterLogic().catch(console.error); 