#!/usr/bin/env node

/**
 * TESTE DA M√âTRICA SPAM_RATE
 * 
 * Testa o c√°lculo da taxa de spam/n√∫meros errados para an√°lise
 * da qualidade do n√∫mero WhatsApp do tenant
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * Calcular spam_rate para um tenant e per√≠odo
 */
async function calculateSpamRate(tenantId, periodDays) {
    console.log(`üö´ Testando SPAM_RATE para tenant ${tenantId.substring(0, 8)} (${periodDays}d)`);
    
    try {
        // Calcular datas do per√≠odo
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(endDate.getDate() - periodDays);
        
        console.log(`   üìÖ Per√≠odo: ${startDate.toISOString().split('T')[0]} at√© ${endDate.toISOString().split('T')[0]}`);
        
        // Definir ENUMs conforme implementa√ß√£o atual
        const SPAM_OUTCOMES = [
            'wrong_number',    // N√∫mero errado - pessoa n√£o √© do neg√≥cio
            'spam_detected'    // Detectado como spam automaticamente
        ];
        
        // Buscar todas as conversas do per√≠odo com outcomes
        const { data: conversations, error } = await supabase
            .from('conversation_history')
            .select(`
                conversation_outcome,
                conversation_context,
                created_at
            `)
            .eq('tenant_id', tenantId)
            .gte('created_at', startDate.toISOString())
            .lte('created_at', endDate.toISOString())
            .not('conversation_context', 'is', null)
            .not('conversation_outcome', 'is', null);
        
        if (error) {
            console.error(`   ‚ùå Erro na query: ${error.message}`);
            throw error;
        }
        
        if (!conversations || conversations.length === 0) {
            console.log(`   üì≠ Nenhuma conversa encontrada para o per√≠odo`);
            return {
                spam_percentage: 0,
                spam_conversations: 0,
                total_conversations: 0,
                outcomes_distribution: {}
            };
        }
        
        // Agrupar por session_id usando data de in√≠cio da conversa
        const sessionMap = new Map();
        
        for (const conv of conversations) {
            const sessionId = conv.conversation_context?.session_id;
            if (!sessionId) continue;
            
            if (!sessionMap.has(sessionId)) {
                // Primeira mensagem da sess√£o
                sessionMap.set(sessionId, {
                    session_id: sessionId,
                    conversation_start: conv.created_at,
                    final_outcome: conv.conversation_outcome
                });
            } else {
                const session = sessionMap.get(sessionId);
                // Usar data de in√≠cio da conversa (primeira mensagem)
                if (new Date(conv.created_at) < new Date(session.conversation_start)) {
                    session.conversation_start = conv.created_at;
                }
                // Atualizar outcome final (√∫ltima mensagem com outcome)
                if (conv.conversation_outcome) {
                    session.final_outcome = conv.conversation_outcome;
                }
            }
        }
        
        // Filtrar sess√µes que iniciaram no per√≠odo correto
        const validSessions = Array.from(sessionMap.values()).filter(session => {
            const sessionStart = new Date(session.conversation_start);
            return sessionStart >= startDate && sessionStart <= endDate;
        });
        
        console.log(`   üí¨ Total de sess√µes √∫nicas encontradas: ${validSessions.length}`);
        
        // Contar conversas spam
        const spamSessions = validSessions.filter(session =>
            SPAM_OUTCOMES.includes(session.final_outcome)
        );
        
        const totalSessions = validSessions.length;
        const spamCount = spamSessions.length;
        const spamPercentage = totalSessions > 0 ? (spamCount / totalSessions) * 100 : 0;
        
        // An√°lise detalhada dos outcomes
        const outcomesDistribution = {};
        validSessions.forEach(session => {
            const outcome = session.final_outcome;
            outcomesDistribution[outcome] = (outcomesDistribution[outcome] || 0) + 1;
        });
        
        console.log(`   üìä Distribui√ß√£o de outcomes:`)
        Object.entries(outcomesDistribution)
            .sort((a, b) => b[1] - a[1])
            .forEach(([outcome, count]) => {
                const isSpam = SPAM_OUTCOMES.includes(outcome);
                const symbol = isSpam ? 'üö´' : '‚ö™';
                const percentage = (count / totalSessions * 100).toFixed(1);
                console.log(`      ${symbol} ${outcome}: ${count} (${percentage}%)`);
            });
        
        // Detalhar especificamente outcomes de spam
        if (spamSessions.length > 0) {
            console.log(`   üö´ Breakdown outcomes de spam:`);
            const spamBreakdown = {};
            spamSessions.forEach(session => {
                const outcome = session.final_outcome;
                spamBreakdown[outcome] = (spamBreakdown[outcome] || 0) + 1;
            });
            
            Object.entries(spamBreakdown).forEach(([outcome, count]) => {
                console.log(`      üìù ${outcome}: ${count} sess√µes`);
            });
        }
        
        // An√°lise de qualidade do n√∫mero WhatsApp
        console.log(`   üìà AN√ÅLISE DE QUALIDADE DO WHATSAPP:`);
        if (spamPercentage === 0) {
            console.log(`      ‚úÖ EXCELENTE: 0% de spam - n√∫mero muito bem protegido`);
        } else if (spamPercentage < 5) {
            console.log(`      ‚úÖ BOM: ${spamPercentage.toFixed(1)}% de spam - n√≠vel aceit√°vel`);
        } else if (spamPercentage < 15) {
            console.log(`      ‚ö†Ô∏è  M√âDIO: ${spamPercentage.toFixed(1)}% de spam - monitorar`);
        } else if (spamPercentage < 30) {
            console.log(`      ‚ùå RUIM: ${spamPercentage.toFixed(1)}% de spam - n√∫mero comprometido`);
        } else {
            console.log(`      üî• CR√çTICO: ${spamPercentage.toFixed(1)}% de spam - n√∫mero queimado`);
        }
        
        const result = {
            spam_percentage: Math.round(spamPercentage * 100) / 100,
            spam_conversations: spamCount,
            total_conversations: totalSessions,
            outcomes_distribution: outcomesDistribution,
            quality_score: spamPercentage < 5 ? 'EXCELENTE' : 
                          spamPercentage < 15 ? 'BOM' : 
                          spamPercentage < 30 ? 'M√âDIO' : 'RUIM'
        };
        
        console.log(`   ‚úÖ Resultado: ${spamCount}/${totalSessions} = ${spamPercentage.toFixed(2)}% de spam`);
        
        return result;
        
    } catch (error) {
        console.error(`   üí• Erro no c√°lculo: ${error instanceof Error ? error.message : error}`);
        throw error;
    }
}

/**
 * Testar m√∫ltiplos tenants e per√≠odos
 */
async function runTests() {
    console.log('üß™ TESTE DA M√âTRICA SPAM_RATE');
    console.log('='.repeat(60));
    
    try {
        // Buscar tenants ativos para teste
        const { data: tenants, error } = await supabase
            .from('tenants')
            .select('id, name')
            .eq('status', 'active');
        
        if (error) {
            throw new Error(`Erro ao buscar tenants: ${error.message}`);
        }
        
        if (!tenants || tenants.length === 0) {
            console.log('‚ùå Nenhum tenant ativo encontrado');
            return;
        }
        
        console.log(`üìä Testando com ${tenants.length} tenants:`);
        tenants.forEach((tenant, index) => {
            console.log(`   ${index + 1}. ${tenant.name} (${tenant.id.substring(0, 8)})`);
        });
        
        console.log('');
        
        // Testar cada tenant com diferentes per√≠odos
        const periods = [7, 30, 90];
        
        for (const tenant of tenants) {
            console.log(`\nüè¢ TENANT: ${tenant.name}`);
            console.log('-'.repeat(60));
            
            for (const periodDays of periods) {
                try {
                    const result = await calculateSpamRate(tenant.id, periodDays);
                    
                    console.log(`   üìä RESUMO ${periodDays}d:`);
                    console.log(`      Conversas spam: ${result.spam_conversations}/${result.total_conversations}`);
                    console.log(`      Taxa spam: ${result.spam_percentage}%`);
                    console.log(`      Qualidade WhatsApp: ${result.quality_score}`);
                    
                } catch (error) {
                    console.log(`   ‚ùå Erro per√≠odo ${periodDays}d: ${error.message}`);
                }
            }
        }
        
        console.log('\n‚úÖ TESTE CONCLU√çDO');
        console.log('\nüìã OUTCOMES DE SPAM TESTADOS:');
        console.log('   üö´ wrong_number - N√∫mero errado, pessoa n√£o √© do neg√≥cio');
        console.log('   üö´ spam_detected - Detectado como spam automaticamente');
        console.log('\nüìà ESCALA DE QUALIDADE:');
        console.log('   ‚úÖ 0-5%: EXCELENTE - N√∫mero bem protegido');
        console.log('   ‚úÖ 5-15%: BOM - N√≠vel aceit√°vel de spam');
        console.log('   ‚ö†Ô∏è  15-30%: M√âDIO - Monitorar situa√ß√£o');
        console.log('   ‚ùå >30%: RUIM - N√∫mero comprometido');
        
    } catch (error) {
        console.error('üí• ERRO NO TESTE:', error);
        process.exit(1);
    }
}

// Executar teste
if (require.main === module) {
    runTests().then(() => {
        process.exit(0);
    }).catch(error => {
        console.error('Erro fatal:', error);
        process.exit(1);
    });
}

module.exports = { calculateSpamRate };