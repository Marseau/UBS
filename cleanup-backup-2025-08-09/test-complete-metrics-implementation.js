const { TenantMetricsCronOptimizedService } = require('./dist/services/tenant-metrics-cron-optimized.service.js');
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function testCompleteMetricsImplementation() {
  console.log('üöÄ TESTANDO IMPLEMENTA√á√ÉO COMPLETA DE M√âTRICAS');
  console.log('='.repeat(70));
  
  try {
    // 1. Limpar dados antigos
    console.log('\nüßπ LIMPANDO DADOS ANTIGOS...');
    const client = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );
    
    await client.from('platform_metrics').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    console.log('‚úÖ Platform metrics limpos');
    
    // 2. Executar agrega√ß√£o completa
    console.log('\nüîß EXECUTANDO AGREGA√á√ÉO COMPLETA...');
    const service = new TenantMetricsCronOptimizedService();
    await service.initialize();
    
    const startTime = Date.now();
    await service.triggerPlatformAggregation();
    const duration = Date.now() - startTime;
    
    console.log(`‚úÖ Agrega√ß√£o completa em ${duration}ms`);
    
    // 3. Validar resultados
    console.log('\nüìä VALIDANDO RESULTADOS...');
    
    const { data: results, error } = await client
      .from('platform_metrics')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.log('‚ùå Erro na consulta:', error);
      return;
    }
    
    console.log(`üìà Total registros criados: ${results.length}`);
    
    // 4. An√°lise detalhada de cada per√≠odo
    for (const record of results) {
      console.log(`\nüìã PER√çODO: ${record.period}`);
      console.log(`   Data: ${record.calculation_date}`);
      
      const metrics = record.comprehensive_metrics;
      const metricData = record.metric_data;
      
      console.log('\n   üéØ M√âTRICAS PRINCIPAIS:');
      console.log(`     ‚Ä¢ Active Tenants: ${metrics.active_tenants}`);
      console.log(`     ‚Ä¢ Total Revenue: R$ ${metrics.total_revenue?.toLocaleString()}`);
      console.log(`     ‚Ä¢ Total Appointments: ${metrics.total_appointments}`);
      console.log(`     ‚Ä¢ Total Customers: ${metrics.total_customers}`);
      console.log(`     ‚Ä¢ Platform MRR: R$ ${metrics.platform_mrr?.toLocaleString()}`);
      
      console.log('\n   üìÖ NOVAS M√âTRICAS - AGENDAMENTOS:');
      console.log(`     ‚Ä¢ Confirmed: ${metrics.total_confirmed_appointments || 0}`);
      console.log(`     ‚Ä¢ Cancelled: ${metrics.total_cancelled_appointments || 0}`);
      console.log(`     ‚Ä¢ Pending: ${metrics.total_pending_appointments || 0}`);
      console.log(`     ‚Ä¢ Completed: ${metrics.total_completed_appointments || 0}`);
      
      console.log('\n   üë• NOVAS M√âTRICAS - CLIENTES:');
      console.log(`     ‚Ä¢ New Customers: ${metrics.total_new_customers || 0}`);
      console.log(`     ‚Ä¢ Returning Customers: ${metrics.total_returning_customers || 0}`);
      console.log(`     ‚Ä¢ Retention Rate: ${metrics.customer_retention_rate_pct?.toFixed(1)}%`);
      
      console.log('\n   üìä NOVAS M√âTRICAS - PERFORMANCE:');
      console.log(`     ‚Ä¢ Business Health Score: ${metrics.average_business_health_score?.toFixed(1)}`);
      console.log(`     ‚Ä¢ Risk Score: ${metrics.average_risk_score?.toFixed(1)}`);
      console.log(`     ‚Ä¢ Success Rate: ${metrics.appointment_success_rate_pct?.toFixed(1)}%`);
      console.log(`     ‚Ä¢ Cancellation Rate: ${metrics.appointment_cancellation_rate_pct?.toFixed(1)}%`);
      console.log(`     ‚Ä¢ Completion Rate: ${metrics.appointment_completion_rate_pct?.toFixed(1)}%`);
      
      console.log('\n   üìà NOVAS M√âTRICAS - CRESCIMENTO:');
      console.log(`     ‚Ä¢ Growth Rate: ${metrics.average_appointments_growth_rate?.toFixed(1)}%`);
      console.log(`     ‚Ä¢ Monthly Revenue: R$ ${metrics.total_monthly_revenue?.toLocaleString()}`);
      
      console.log('\n   üåê NOVAS M√âTRICAS - PARTICIPA√á√ÉO:');
      console.log(`     ‚Ä¢ Appointments %: ${metrics.avg_appointments_platform_percentage?.toFixed(2)}%`);
      console.log(`     ‚Ä¢ Customers %: ${metrics.avg_customers_platform_percentage?.toFixed(2)}%`);
      console.log(`     ‚Ä¢ Revenue %: ${metrics.avg_revenue_platform_percentage?.toFixed(2)}%`);
      
      // Verificar m√©tricas no metric_data
      if (metricData.risk_levels_distribution) {
        console.log('\n   ‚ö†Ô∏è  DISTRIBUI√á√ÉO DE RISCO:');
        Object.entries(metricData.risk_levels_distribution).forEach(([level, count]) => {
          console.log(`     ‚Ä¢ ${level}: ${count} tenants`);
        });
      }
      
      console.log('\n   üìÖ METADATA:');
      console.log(`     ‚Ä¢ Period Start: ${metricData.period_start}`);
      console.log(`     ‚Ä¢ Period End: ${metricData.period_end}`);
      console.log(`     ‚Ä¢ Tenants Processed: ${metricData.tenants_processed}`);
      console.log(`     ‚Ä¢ Data Source: ${metricData.data_source}`);
    }
    
    // 5. Comparar com an√°lise original
    console.log('\nüîç COMPARA√á√ÉO COM AN√ÅLISE ORIGINAL:');
    
    // Reexecutar an√°lise de m√©tricas ausentes
    const { data: allTenantMetrics } = await client
      .from('tenant_metrics')
      .select('metric_data');
    
    const allMetricsSet = new Set();
    allTenantMetrics.forEach(record => {
      if (record.metric_data) {
        Object.keys(record.metric_data).forEach(key => {
          allMetricsSet.add(key);
        });
      }
    });
    
    const allTenantMetricsKeys = Array.from(allMetricsSet);
    
    // Verificar quantas m√©tricas agora est√£o implementadas
    const implementedInPlatform = new Set();
    results.forEach(record => {
      if (record.metric_data) {
        Object.keys(record.metric_data).forEach(key => {
          implementedInPlatform.add(key);
        });
      }
      if (record.comprehensive_metrics) {
        Object.keys(record.comprehensive_metrics).forEach(key => {
          implementedInPlatform.add(key);
        });
      }
    });
    
    const stillMissing = allTenantMetricsKeys.filter(metric => 
      !implementedInPlatform.has(metric)
    );
    
    console.log(`\nüìä RESULTADOS FINAIS:`);
    console.log(`   ‚Ä¢ Total m√©tricas tenant_metrics: ${allTenantMetricsKeys.length}`);
    console.log(`   ‚Ä¢ M√©tricas implementadas: ${implementedInPlatform.size}`);
    console.log(`   ‚Ä¢ M√©tricas ainda ausentes: ${stillMissing.length}`);
    console.log(`   ‚Ä¢ Completude da agrega√ß√£o: ${Math.round((implementedInPlatform.size / allTenantMetricsKeys.length) * 100)}%`);
    
    if (stillMissing.length > 0) {
      console.log(`\n‚ùå M√©tricas ainda ausentes:`);
      stillMissing.forEach((metric, index) => {
        console.log(`   ${index + 1}. ${metric}`);
      });
    } else {
      console.log(`\n‚úÖ TODAS AS M√âTRICAS IMPLEMENTADAS COM SUCESSO!`);
    }
    
    process.exit(0);
    
  } catch (error) {
    console.log('‚ùå Erro no teste:', error.message);
    process.exit(1);
  }
}

testCompleteMetricsImplementation();