/**
 * Script de Valida√ß√£o Cont√≠nua de M√©tricas
 * 
 * Implementa o Framework Context Engineering para monitoramento
 * autom√°tico da qualidade dos dados de m√©tricas
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * Executa valida√ß√£o usando as fun√ß√µes SQL independentes
 * criadas pelo Framework Context Engineering
 */
async function runIndependentSQLValidation() {
  console.log('üîç EXECUTANDO VALIDA√á√ïES SQL INDEPENDENTES');
  console.log('üìã Framework Context Engineering - Valida√ß√£o Automatizada\n');

  const validationResults = {
    revenue_consistency: [],
    field_semantics: [],
    ai_efficiency: [],
    data_quality_score: 0
  };

  try {
    // 1. Valida√ß√£o de Consist√™ncia de Receita
    console.log('üí∞ Validando consist√™ncia de receita...');
    const { data: revenueValidation, error: revenueError } = await supabase
      .rpc('validate_revenue_consistency');

    if (revenueError) {
      console.error('‚ùå Erro na valida√ß√£o de receita:', revenueError.message);
    } else {
      validationResults.revenue_consistency = revenueValidation || [];
      const inconsistentCount = revenueValidation?.filter(r => r.discrepancy_percent > 5)?.length || 0;
      console.log(`   ‚úÖ ${revenueValidation?.length || 0} registros verificados`);
      console.log(`   ‚ö†Ô∏è ${inconsistentCount} inconsist√™ncias detectadas`);
    }

    // 2. Valida√ß√£o de Campos Sem√¢nticos
    console.log('\nüè∑Ô∏è Validando sem√¢ntica de campos...');
    const { data: fieldValidation, error: fieldError } = await supabase
      .rpc('validate_field_semantics');

    if (fieldError) {
      console.error('‚ùå Erro na valida√ß√£o de campos:', fieldError.message);
    } else {
      validationResults.field_semantics = fieldValidation || [];
      const semanticIssues = fieldValidation?.filter(f => !f.semantic_match)?.length || 0;
      console.log(`   ‚úÖ ${fieldValidation?.length || 0} campos verificados`);
      console.log(`   ‚ö†Ô∏è ${semanticIssues} problemas sem√¢nticos detectados`);
    }

    // 3. Valida√ß√£o de AI Efficiency
    console.log('\nü§ñ Validando AI efficiency ranges...');
    const { data: aiValidation, error: aiError } = await supabase
      .rpc('validate_ai_efficiency_ranges');

    if (aiError) {
      console.error('‚ùå Erro na valida√ß√£o de AI:', aiError.message);
    } else {
      validationResults.ai_efficiency = aiValidation || [];
      const aiIssues = aiValidation?.filter(a => !a.within_expected_range)?.length || 0;
      console.log(`   ‚úÖ ${aiValidation?.length || 0} c√°lculos de IA verificados`);
      console.log(`   ‚ÑπÔ∏è ${aiIssues} valores fora do range esperado`);
    }

    // 4. Calcular Score de Qualidade Geral
    const totalChecks = (validationResults.revenue_consistency.length || 0) + 
                       (validationResults.field_semantics.length || 0) + 
                       (validationResults.ai_efficiency.length || 0);
    
    const totalIssues = inconsistentCount + semanticIssues + aiIssues;
    
    validationResults.data_quality_score = totalChecks > 0 ? 
      Math.round(((totalChecks - totalIssues) / totalChecks) * 100) : 100;

    console.log(`\nüìä SCORE DE QUALIDADE DOS DADOS: ${validationResults.data_quality_score}%`);

    return validationResults;

  } catch (error) {
    console.error('‚ùå Erro geral na valida√ß√£o:', error.message);
    return validationResults;
  }
}

/**
 * Identifica tenants que precisam de aten√ß√£o imediata
 */
async function identifyTenantsNeedingAttention() {
  console.log('\nüéØ IDENTIFICANDO TENANTS CR√çTICOS...');

  try {
    // Buscar tenants com m√©tricas zeradas mas dados reais
    const { data: problematicTenants, error } = await supabase
      .rpc('identify_revenue_discrepancies');

    if (error) {
      console.error('‚ùå Erro ao identificar tenants problem√°ticos:', error.message);
      return [];
    }

    const criticalTenants = problematicTenants?.filter(t => 
      t.stored_revenue === 0 && t.actual_revenue > 1000
    ) || [];

    console.log(`‚ö†Ô∏è ${criticalTenants.length} tenants cr√≠ticos identificados:`);
    
    criticalTenants.forEach(tenant => {
      console.log(`   üìç ${tenant.tenant_id}: R$ ${tenant.actual_revenue.toFixed(2)} n√£o contabilizados (${tenant.appointments_count} agendamentos)`);
    });

    return criticalTenants;

  } catch (error) {
    console.error('‚ùå Erro ao identificar tenants:', error.message);
    return [];
  }
}

/**
 * Gera relat√≥rio de sa√∫de do sistema de m√©tricas
 */
async function generateMetricsHealthReport() {
  console.log('\nüìã GERANDO RELAT√ìRIO DE SA√öDE DO SISTEMA');
  console.log('=' .repeat(60));

  const report = {
    timestamp: new Date().toISOString(),
    validation_results: null,
    critical_tenants: [],
    recommendations: [],
    overall_health: 'UNKNOWN'
  };

  try {
    // Executar valida√ß√µes
    report.validation_results = await runIndependentSQLValidation();
    report.critical_tenants = await identifyTenantsNeedingAttention();

    // Gerar recomenda√ß√µes baseadas nos resultados
    const qualityScore = report.validation_results.data_quality_score;
    const criticalCount = report.critical_tenants.length;

    if (qualityScore >= 95 && criticalCount === 0) {
      report.overall_health = 'EXCELLENT';
      report.recommendations.push('‚úÖ Sistema operando com excel√™ncia');
    } else if (qualityScore >= 85 && criticalCount <= 2) {
      report.overall_health = 'GOOD';
      report.recommendations.push('üü° Sistema em boa condi√ß√£o, pequenos ajustes recomendados');
    } else if (qualityScore >= 70 || criticalCount <= 5) {
      report.overall_health = 'WARNING';
      report.recommendations.push('‚ö†Ô∏è Aten√ß√£o necess√°ria - executar corre√ß√µes');
      if (criticalCount > 0) {
        report.recommendations.push(`üîß Corrigir ${criticalCount} tenants cr√≠ticos imediatamente`);
      }
    } else {
      report.overall_health = 'CRITICAL';
      report.recommendations.push('üö® Interven√ß√£o urgente necess√°ria');
      report.recommendations.push('üîß Executar script de corre√ß√£o cr√≠tica');
      report.recommendations.push('üìû Alertar equipe de desenvolvimento');
    }

    // Exibir relat√≥rio
    console.log(`\nüè• SA√öDE GERAL: ${report.overall_health}`);
    console.log(`üìä Score de Qualidade: ${qualityScore}%`);
    console.log(`‚ö†Ô∏è Tenants Cr√≠ticos: ${criticalCount}`);
    
    console.log('\nüí° RECOMENDA√á√ïES:');
    report.recommendations.forEach(rec => console.log(`   ${rec}`));

    // Salvar relat√≥rio
    const reportPath = `./metrics-health-report-${new Date().toISOString().split('T')[0]}.json`;
    require('fs').writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`\nüíæ Relat√≥rio salvo: ${reportPath}`);

    return report;

  } catch (error) {
    console.error('‚ùå Erro ao gerar relat√≥rio:', error.message);
    report.overall_health = 'ERROR';
    report.recommendations.push(`‚ùå Erro na valida√ß√£o: ${error.message}`);
    return report;
  }
}

// Fun√ß√£o principal para execu√ß√£o via cron
async function runContinuousValidation() {
  console.log('üöÄ FRAMEWORK CONTEXT ENGINEERING - VALIDA√á√ÉO CONT√çNUA');
  console.log(`‚è∞ Execu√ß√£o: ${new Date().toLocaleString('pt-BR')}`);
  console.log('=' .repeat(70));

  try {
    const healthReport = await generateMetricsHealthReport();
    
    // Se estado cr√≠tico, sugerir a√ß√µes imediatas
    if (healthReport.overall_health === 'CRITICAL' || healthReport.critical_tenants.length > 3) {
      console.log('\nüö® A√á√ÉO IMEDIATA NECESS√ÅRIA:');
      console.log('   Executar: node fix-revenue-discrepancies-critical.js');
    }

    console.log('\n‚úÖ Valida√ß√£o cont√≠nua conclu√≠da!');
    return healthReport;

  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o cont√≠nua:', error.message);
    throw error;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runContinuousValidation()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erro cr√≠tico:', error);
      process.exit(1);
    });
}

module.exports = {
  runContinuousValidation,
  generateMetricsHealthReport,
  runIndependentSQLValidation,
  identifyTenantsNeedingAttention
};