require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const client = createClient(
  process.env.SUPABASE_URL, 
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function compareTenantVsPlatformMetrics() {
  console.log('üìä COMPARANDO M√âTRICAS: tenant_metrics vs platform_metrics');
  console.log('========================================================\n');
  
  // Get tenant_metrics sample
  const { data: tenantSample } = await client
    .from('tenant_metrics')
    .select('metric_data')
    .eq('period', '30d')
    .limit(1);
    
  // Get platform_metrics sample  
  const { data: platformSample } = await client
    .from('platform_metrics')
    .select('metric_data')
    .eq('period', '30d')
    .limit(1);
    
  if (!tenantSample || !tenantSample[0] || !platformSample || !platformSample[0]) {
    console.log('‚ùå Dados n√£o encontrados');
    return;
  }
  
  const tenantData = tenantSample[0].metric_data;
  const platformData = platformSample[0].metric_data;
  
  console.log('üéØ ESTRUTURA tenant_metrics (V6.0 ATUAL):');
  console.log('==========================================');
  
  // Analyze tenant_metrics structure (v6.0 format)
  if (typeof tenantData === 'object' && tenantData !== null) {
    const fields = Object.keys(tenantData).sort();
    console.log('üìã Campos dispon√≠veis:', fields.length);
    
    fields.forEach(field => {
      const value = tenantData[field];
      const type = Array.isArray(value) ? 'array' : typeof value;
      const preview = type === 'object' && value !== null ? 
        `{${Object.keys(value).slice(0,3).join(', ')}${Object.keys(value).length > 3 ? '...' : ''}}` :
        String(value).substring(0, 50);
        
      console.log(`  ‚Ä¢ ${field}: ${type} = ${preview}`);
    });
  }
  
  console.log('\nüèóÔ∏è ESTRUTURA platform_metrics (UNIFICADO):');
  console.log('============================================');
  
  // Analyze platform_metrics structure (unified format)
  if (typeof platformData === 'object' && platformData !== null) {
    const modules = Object.keys(platformData).sort();
    console.log('üìã M√≥dulos dispon√≠veis:', modules.length);
    
    modules.forEach(module => {
      const moduleData = platformData[module];
      if (typeof moduleData === 'object' && moduleData !== null) {
        const fields = Object.keys(moduleData);
        console.log(`\n  üì¶ ${module}:`);
        fields.forEach(field => {
          const value = moduleData[field];
          console.log(`    ‚Ä¢ ${field}: ${value}`);
        });
      }
    });
  }
  
  console.log('\n‚ùå M√âTRICAS N√ÉO AGREGADAS (tenant ‚Üí platform):');
  console.log('================================================');
  
  // Compare what's missing
  if (typeof tenantData === 'object' && tenantData !== null) {
    const tenantFields = Object.keys(tenantData);
    
    console.log('\nüö´ CAMPOS B√ÅSICOS PERDIDOS DO TENANT_METRICS:');
    tenantFields.forEach(field => {
      if (!['period', 'version', 'calculation_date', 'tenant_id', 'business_name'].includes(field)) {
        const value = tenantData[field];
        const type = typeof value;
        console.log(`  ‚ùå ${field}: ${type} = ${value} (n√£o agregado na platform)`);
      }
    });
    
    console.log('\nüìä POTENCIAIS GR√ÅFICOS E DASHBOARDS PERDIDOS:');
    console.log('=============================================');
    console.log('‚ùå GR√ÅFICOS DE TEND√äNCIA TEMPORAL:');
    console.log('  ‚Ä¢ Revenue progression por per√≠odo');
    console.log('  ‚Ä¢ Appointment volume trends');
    console.log('  ‚Ä¢ Customer growth over time');
    console.log('  ‚Ä¢ Individual tenant performance vs platform average');
    
    console.log('\n‚ùå AN√ÅLISES DISTRIBUTIVAS:');
    console.log('  ‚Ä¢ Business name word cloud');
    console.log('  ‚Ä¢ Domain distribution (healthcare, beauty, etc.)');
    console.log('  ‚Ä¢ Tenant size clustering (by revenue/appointments)');
    console.log('  ‚Ä¢ Geographic distribution (if available)');
    
    console.log('\n‚ùå M√âTRICAS OPERACIONAIS DETALHADAS:');
    console.log('  ‚Ä¢ Individual tenant health scores');
    console.log('  ‚Ä¢ Outlier detection (high/low performers)');
    console.log('  ‚Ä¢ Tenant lifecycle analysis');
    console.log('  ‚Ä¢ Version distribution tracking');
    
    console.log('\nüí° RECOMENDA√á√ïES PARA SUPER ADMIN DASHBOARD:');
    console.log('=============================================');
    console.log('‚úÖ GR√ÅFICOS SUGERIDOS:');
    console.log('  üìà Time series: Platform revenue vs individual contributions');
    console.log('  üéØ Scatter plot: Tenant revenue vs appointments (size by customers)');
    console.log('  üìä Bar chart: Top 10 performing tenants by revenue');
    console.log('  ü•ß Pie chart: Revenue distribution by tenant size');
    console.log('  üìâ Line chart: MRR growth vs actual revenue growth');
    console.log('  üå°Ô∏è Heat map: Tenant performance matrix (revenue vs growth)');
    
    console.log('\n‚úÖ M√âTRICAS ADICIONAIS RECOMENDADAS:');
    console.log('  üí∞ Average Revenue Per Tenant (ARPT)');
    console.log('  üìä Revenue concentration (% from top 20% tenants)');
    console.log('  üéØ Tenant engagement score (appointments/customer ratio)');
    console.log('  üìà Platform growth velocity');
    console.log('  ‚öñÔ∏è Revenue vs Cost margin per tenant');
    
    console.log('\nüîß ESTRUTURA UNIFICADA - BENEF√çCIOS ATUAIS:');
    console.log('===========================================');
    console.log('‚úÖ Same JSONB organization (financial_metrics, appointment_metrics, etc.)');
    console.log('‚úÖ Platform MRR calculated correctly from subscription_payments');
    console.log('‚úÖ Weighted averages for meaningful platform KPIs');
    console.log('‚úÖ Consistent data access patterns for developers');
    console.log('‚úÖ Dashboard component reusability between tenant and platform views');
    console.log('‚úÖ Architectural uniformity maintained');
    
    console.log('\nüé® DASHBOARD IMPLEMENTATION SUGGESTIONS:');
    console.log('=======================================');
    console.log('1. Create tenant drill-down capability from platform charts');
    console.log('2. Add tenant comparison tools (side-by-side metrics)');
    console.log('3. Implement tenant ranking and leaderboards');
    console.log('4. Add alert system for tenant performance anomalies');
    console.log('5. Create tenant lifecycle stages visualization');
    console.log('6. Add predictive analytics for tenant churn risk');
    
    console.log('\nüöÄ NEXT DEVELOPMENT PRIORITIES:');
    console.log('===============================');
    console.log('Priority 1: Individual tenant drill-down views');
    console.log('Priority 2: Comparative analytics (tenant vs platform)');  
    console.log('Priority 3: Predictive metrics and alerts');
    console.log('Priority 4: Advanced visualization components');
    console.log('Priority 5: Export and reporting capabilities');
  }
}

compareTenantVsPlatformMetrics().catch(console.error);