/**
 * TESTE COMPLETO DO SISTEMA DE M√âTRICAS EXPANDIDO
 * Context Engineering COLEAM00 - Valida√ß√£o de todas as novas m√©tricas
 * 
 * NOVAS M√âTRICAS IMPLEMENTADAS:
 * - Agendamentos cancelados (detalhados por quem cancelou)
 * - Agendamentos no-show (detalhados por servi√ßo e hor√°rio)
 * - M√©tricas por servi√ßo (appointments por servi√ßo)
 * - Servi√ßos dispon√≠veis por tenant
 * - Contagem de clientes √∫nicos por tenant
 * - Contagem de funcion√°rios por tenant
 */

require('dotenv').config();
const { MetricsAnalysisService, MetricsPeriod } = require('./dist/services/services/metrics-analysis.service.js');

async function testCompleteMetricsSystem() {
    console.log('üî¨ TESTE COMPLETO DO SISTEMA DE M√âTRICAS EXPANDIDO');
    console.log('Context Engineering COLEAM00 - Valida√ß√£o de Todas as Novas M√©tricas');
    console.log('=' .repeat(80));

    try {
        const analysisService = MetricsAnalysisService.getInstance();
        
        // Usar tenant Bella Vista Spa para teste
        const tenantId = '33b8c488-5aa9-4891-b335-701d10296681';
        const tenantName = 'Bella Vista Spa';
        
        console.log(`üè™ Testando tenant: ${tenantName} (${tenantId})`);
        console.log('-'.repeat(80));

        // Testar per√≠odo de 30 dias
        const period = MetricsPeriod.THIRTY_DAYS;
        console.log(`üìÖ Per√≠odo de teste: 30 DIAS`);
        
        const startTime = Date.now();
        const metrics = await analysisService.analyzeAppointments(tenantId, period);
        const endTime = Date.now();
        
        console.log(`‚è±Ô∏è  Tempo de processamento: ${endTime - startTime}ms`);
        console.log('\n' + '='.repeat(80));
        console.log('üìä RESULTADO COMPLETO DAS M√âTRICAS');
        console.log('='.repeat(80));

        // ========================================
        // M√âTRICAS B√ÅSICAS
        // ========================================
        console.log('\nüî¢ M√âTRICAS B√ÅSICAS:');
        console.log(`   üìÖ Total Appointments: ${metrics.total_appointments}`);
        console.log(`   ‚úÖ Completed: ${metrics.completed_appointments}`);
        console.log(`   üîÑ Confirmed: ${metrics.confirmed_appointments}`);
        console.log(`   ‚ùå Cancelled: ${metrics.cancelled_appointments}`);
        console.log(`   üëª No-show: ${metrics.no_show_appointments}`);
        console.log(`   üí∞ Total Revenue: R$ ${metrics.total_revenue.toFixed(2)}`);
        console.log(`   üìà Success Rate: ${metrics.appointment_success_rate.toFixed(1)}%`);
        console.log(`   üë• Total Customers: ${metrics.total_customers}`);

        // ========================================
        // M√âTRICAS POR CANAL (INTERNOS VS EXTERNOS)
        // ========================================
        console.log('\nüì° M√âTRICAS POR CANAL:');
        console.log(`   üè† INTERNOS: ${metrics.internal_appointments.total} appointments`);
        console.log(`      - Completed: ${metrics.internal_appointments.completed}`);
        console.log(`      - Revenue: R$ ${metrics.internal_appointments.revenue.toFixed(2)}`);
        console.log(`      - Customers: ${metrics.internal_appointments.customers}`);
        
        console.log(`   üåê EXTERNOS: ${metrics.external_appointments.total} appointments`);
        console.log(`      - Completed: ${metrics.external_appointments.completed}`);
        console.log(`      - Revenue: R$ ${metrics.external_appointments.revenue.toFixed(2)}`);
        console.log(`      - Customers: ${metrics.external_appointments.customers}`);
        console.log(`      - Sources:`, JSON.stringify(metrics.external_appointments.sources, null, 8));
        
        console.log(`   ü§ñ WHATSAPP/IA: ${metrics.whatsapp_ai_appointments.total} appointments`);
        console.log(`      - Completed: ${metrics.whatsapp_ai_appointments.completed}`);
        console.log(`      - Revenue: R$ ${metrics.whatsapp_ai_appointments.revenue.toFixed(2)}`);
        console.log(`      - Customers: ${metrics.whatsapp_ai_appointments.customers}`);

        // ========================================
        // NOVAS M√âTRICAS DETALHADAS - CANCELAMENTOS
        // ========================================
        console.log('\n‚ùå M√âTRICAS DE CANCELAMENTOS DETALHADAS:');
        const cancelled = metrics.cancelled_appointments_detail;
        console.log(`   üìä Total Cancelados: ${cancelled.total_cancelled}`);
        console.log(`   üë§ Por Customer: ${cancelled.cancelled_by_customer}`);
        console.log(`   üè¢ Por Business: ${cancelled.cancelled_by_business}`);
        console.log(`   ü§ñ Por System: ${cancelled.cancelled_by_system}`);
        console.log(`   üí∏ Revenue Perdido: R$ ${cancelled.revenue_lost.toFixed(2)}`);
        console.log(`   ‚è∞ Tempo M√©dio de Cancelamento: ${cancelled.avg_cancellation_time_hours.toFixed(1)}h`);
        console.log(`   üìã Raz√µes de Cancelamento:`, JSON.stringify(cancelled.top_cancellation_reasons, null, 8));

        // ========================================
        // NOVAS M√âTRICAS DETALHADAS - NO-SHOWS
        // ========================================
        console.log('\nüëª M√âTRICAS DE NO-SHOW DETALHADAS:');
        const noShow = metrics.no_show_appointments_detail;
        console.log(`   üìä Total No-shows: ${noShow.total_no_show}`);
        console.log(`   üí∏ Revenue Perdido: R$ ${noShow.revenue_lost_no_show.toFixed(2)}`);
        console.log(`   üîÑ Clientes Repeat No-show: ${noShow.repeat_no_show_customers}`);
        console.log(`   üõéÔ∏è  No-show por Servi√ßo:`, JSON.stringify(noShow.no_show_by_service, null, 8));
        console.log(`   üïê No-show por Hor√°rio:`, JSON.stringify(noShow.no_show_by_time_slot, null, 8));

        // ========================================
        // NOVAS M√âTRICAS - SERVI√áOS
        // ========================================
        console.log('\nüõéÔ∏è  M√âTRICAS POR SERVI√áO:');
        const serviceKeys = Object.keys(metrics.appointments_by_service);
        if (serviceKeys.length > 0) {
            console.log(`   üìà Total de Servi√ßos com Appointments: ${serviceKeys.length}`);
            
            // Mostrar top 5 servi√ßos
            const topServices = serviceKeys
                .map(key => metrics.appointments_by_service[key])
                .sort((a, b) => b.total_appointments - a.total_appointments)
                .slice(0, 5);
            
            console.log('\n   üèÜ TOP 5 SERVI√áOS POR VOLUME:');
            topServices.forEach((service, index) => {
                console.log(`      ${index + 1}. ${service.service_name}:`);
                console.log(`         - Appointments: ${service.total_appointments}`);
                console.log(`         - Completed: ${service.completed_appointments}`);
                console.log(`         - Revenue: R$ ${service.total_revenue.toFixed(2)}`);
                console.log(`         - Success Rate: ${service.success_rate.toFixed(1)}%`);
                console.log(`         - Avg Price: R$ ${service.avg_service_price.toFixed(2)}`);
            });
        } else {
            console.log(`   ‚ö†Ô∏è  Nenhum servi√ßo encontrado com appointments`);
        }

        // ========================================
        // NOVAS M√âTRICAS - DISPONIBILIDADE DE SERVI√áOS
        // ========================================
        console.log('\nüõçÔ∏è  DISPONIBILIDADE DE SERVI√áOS:');
        const serviceAvail = metrics.available_services;
        console.log(`   üìä Total Servi√ßos Dispon√≠veis: ${serviceAvail.total_services_available}`);
        console.log(`   ‚úÖ Servi√ßos Ativos: ${serviceAvail.active_services}`);
        console.log(`   ‚ùå Servi√ßos Inativos: ${serviceAvail.inactive_services}`);
        console.log(`   üìÖ Servi√ßos com Appointments: ${serviceAvail.services_with_appointments}`);
        console.log(`   üí∞ Pre√ßo M√©dio: R$ ${serviceAvail.avg_price_per_service.toFixed(2)}`);
        console.log(`   üíµ Faixa de Pre√ßo: R$ ${serviceAvail.price_range.min.toFixed(2)} - R$ ${serviceAvail.price_range.max.toFixed(2)}`);
        console.log(`   üèÜ Mais Popular: ${serviceAvail.most_popular_service}`);
        console.log(`   üíé Maior Revenue: ${serviceAvail.highest_revenue_service}`);

        // ========================================
        // NOVAS M√âTRICAS - CLIENTES
        // ========================================
        console.log('\nüë• M√âTRICAS DE CLIENTES:');
        const customers = metrics.customer_metrics;
        console.log(`   üìä Total Clientes √önicos: ${customers.total_unique_customers}`);
        console.log(`   üÜï Novos Clientes: ${customers.new_customers}`);
        console.log(`   üîÑ Clientes Retornantes: ${customers.returning_customers}`);
        console.log(`   üìà Taxa de Reten√ß√£o: ${customers.customer_retention_rate.toFixed(1)}%`);
        console.log(`   üìÖ Avg Appointments/Cliente: ${customers.avg_appointments_per_customer.toFixed(1)}`);
        console.log(`   üí∞ Customer Lifetime Value: R$ ${customers.customer_lifetime_value.toFixed(2)}`);
        console.log(`   üì± Canais de Aquisi√ß√£o:`, JSON.stringify(customers.customers_by_acquisition_channel, null, 8));
        
        if (customers.top_customers_by_revenue.length > 0) {
            console.log('\n   üèÜ TOP 5 CLIENTES POR REVENUE:');
            customers.top_customers_by_revenue.slice(0, 5).forEach((customer, index) => {
                console.log(`      ${index + 1}. ${customer.customer_id.substring(0, 8)}...:`);
                console.log(`         - Appointments: ${customer.appointments}`);
                console.log(`         - Total Gasto: R$ ${customer.total_spent.toFixed(2)}`);
            });
        }

        // ========================================
        // NOVAS M√âTRICAS - FUNCION√ÅRIOS
        // ========================================
        console.log('\nüë©‚Äçüíº M√âTRICAS DE FUNCION√ÅRIOS:');
        const staff = metrics.staff_metrics;
        console.log(`   üìä Total Funcion√°rios: ${staff.total_staff_members}`);
        console.log(`   ‚úÖ Funcion√°rios Ativos: ${staff.active_staff_members}`);
        console.log(`   üìÖ Staff com Appointments: ${staff.staff_with_appointments}`);
        console.log(`   üìà Avg Appointments/Staff: ${staff.avg_appointments_per_staff.toFixed(1)}`);
        console.log(`   üìä Taxa de Utiliza√ß√£o: ${staff.staff_utilization_rate.toFixed(1)}%`);
        console.log(`   ‚è∞ Horas de Disponibilidade: ${staff.staff_availability_hours}h`);
        
        if (staff.top_performing_staff.length > 0) {
            console.log('\n   üèÜ TOP PERFORMING STAFF:');
            staff.top_performing_staff.forEach((member, index) => {
                console.log(`      ${index + 1}. ${member.staff_id.substring(0, 8)}...:`);
                console.log(`         - Appointments: ${member.appointments_handled}`);
                console.log(`         - Revenue: R$ ${member.revenue_generated.toFixed(2)}`);
                console.log(`         - Success Rate: ${member.success_rate.toFixed(1)}%`);
            });
        }

        // ========================================
        // PERFORMANCE DOS CANAIS
        // ========================================
        console.log('\nüöÄ PERFORMANCE DOS CANAIS:');
        const performance = metrics.channel_performance;
        console.log(`   üìä Ratio Interno/Externo: ${performance.internal_vs_external_ratio.toFixed(1)}%`);
        console.log(`   üèÜ Melhor Canal: ${performance.best_performing_channel}`);
        console.log(`   üìà Melhor Taxa de Convers√£o: ${performance.best_conversion_rate.toFixed(1)}%`);
        console.log(`   üí∞ Melhor Revenue/Appointment: R$ ${performance.best_revenue_per_appointment.toFixed(2)}`);
        
        console.log('\n   üìã RANKING DE EFICI√äNCIA:');
        performance.channel_efficiency_ranking.forEach((channel, index) => {
            console.log(`      ${index + 1}. ${channel.channel.toUpperCase()}:`);
            console.log(`         - Success Rate: ${channel.success_rate.toFixed(1)}%`);
            console.log(`         - Revenue/Appointment: R$ ${channel.revenue_per_appointment.toFixed(2)}`);
            console.log(`         - Efficiency Score: ${channel.efficiency_score.toFixed(1)}`);
        });

        // ========================================
        // RESUMO EXECUTIVO
        // ========================================
        console.log('\n' + '='.repeat(80));
        console.log('üìã RESUMO EXECUTIVO');
        console.log('='.repeat(80));
        console.log(`‚úÖ SISTEMA DE M√âTRICAS EXPANDIDO FUNCIONANDO CORRETAMENTE`);
        console.log(`üìä Tenant processado com sucesso: ${tenantName}`);
        console.log(`‚è±Ô∏è  Performance: ${endTime - startTime}ms`);
        console.log(`üî¢ M√©tricas b√°sicas: ‚úÖ OK`);
        console.log(`üì° M√©tricas por canal: ‚úÖ OK`);
        console.log(`‚ùå M√©tricas de cancelamento: ‚úÖ OK`);
        console.log(`üëª M√©tricas de no-show: ‚úÖ OK`);
        console.log(`üõéÔ∏è  M√©tricas por servi√ßo: ‚úÖ OK`);
        console.log(`üõçÔ∏è  Disponibilidade de servi√ßos: ‚úÖ OK`);
        console.log(`üë• M√©tricas de clientes: ‚úÖ OK`);
        console.log(`üë©‚Äçüíº M√©tricas de funcion√°rios: ‚úÖ OK`);
        console.log(`üöÄ Performance dos canais: ‚úÖ OK`);

        console.log('\nüéâ TODAS AS NOVAS M√âTRICAS IMPLEMENTADAS E FUNCIONANDO!');
        console.log('üîÑ Sistema pronto para ser integrado ao dashboard');

    } catch (error) {
        console.error('‚ùå Erro durante teste do sistema de m√©tricas:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

// Executar teste completo
testCompleteMetricsSystem();