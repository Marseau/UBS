/**
 * ConversationOutcomeAnalyzerService
 * 
 * Sistema para separa√ß√£o completa entre Intent e Outcome:
 * - Intent: Detectado e persistido a n√≠vel de mensagem (conversation_history.intent_detected)
 * - Outcome: Persistido apenas a n√≠vel de conversa√ß√£o quando fluxos s√£o finalizados (conversation_history.conversation_outcome)
 * 
 * Regras fundamentais:
 * 1. Intent pode mudar m√∫ltiplas vezes na mesma conversa
 * 2. Outcome √© definido apenas quando fluxo √© completado ou abandonado
 * 3. PROIBIDO mapear outcome diretamente do intent
 * 4. Outcome persiste apenas na √∫ltima mensagem de cada conversa√ß√£o
 */

import { createClient } from '@supabase/supabase-js';
import { format } from 'date-fns';
import { BusinessIntent, UserIntent, SystemFlowState, MessageIntent, UnifiedIntent, isValidIntent } from '../types/intent.types';
import { schemaValidator } from './schema-validator.service';
import { intentCascadeMonitor } from './intent-cascade-monitor.service';

const SUPABASE_URL = process.env.SUPABASE_URL as string;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY as string;

const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: { persistSession: false }
});

// REMOVIDO: Defini√ß√£o duplicada de MessageIntent - agora usa o sistema unificado de ../types/intent.types.ts

// Tipos para Outcome (n√≠vel de conversa√ß√£o)
export type ConversationOutcome = 
  | 'appointment_created'      // Agendamento criado com sucesso
  | 'appointment_rescheduled'  // Agendamento reagendado
  | 'appointment_cancelled'    // Agendamento cancelado
  | 'information_provided'     // Informa√ß√µes fornecidas (pre√ßos, servi√ßos, etc.)
  | 'booking_abandoned'        // Fluxo de agendamento abandonado
  | 'reschedule_abandoned'     // Fluxo de reagendamento abandonado
  | 'cancel_abandoned'         // Fluxo de cancelamento abandonado
  | 'timeout_abandoned'        // Conversa√ß√£o abandonada por timeout
  | 'handoff_completed'        // Transferido para humano
  | 'conversation_ongoing'     // Conversa√ß√£o ainda em andamento
  | null;

interface IntentDetectionResult {
  intent: MessageIntent;
  confidence: number;
  method: 'regex' | 'llm' | 'deterministic';
  metadata?: Record<string, any>;
  urgency?: UrgencyLevel;
  priority?: PriorityLevel;
  context?: ContextualInfo;
}

// Novos tipos para urg√™ncia e prioridade
export type UrgencyLevel = 'critical' | 'high' | 'medium' | 'low';
export type PriorityLevel = 'immediate' | 'same_day' | 'next_day' | 'week' | 'flexible';

interface ContextualInfo {
  isEmergency: boolean;
  requiresImmediate: boolean;
  timeConstraints?: string[];
  specialNeeds?: string[];
  emotionalState?: 'distressed' | 'anxious' | 'frustrated' | 'calm' | 'excited';
}

interface OutcomeFinalizeResult {
  success: boolean;
  outcome: ConversationOutcome;
  conversation_id: string;
  finalized_at: string;
}

export class ConversationOutcomeAnalyzerService {

  /**
   * Analisa contexto, urg√™ncia e prioridade da mensagem
   */
  private analyzeUrgencyAndContext(messageText: string, intent: MessageIntent): {
    urgency: UrgencyLevel;
    priority: PriorityLevel;
    context: ContextualInfo;
  } {
    const text = messageText.toLowerCase().trim();
    
    // An√°lise de emerg√™ncia e urg√™ncia cr√≠tica
    const criticalPatterns = [
      /(suic√≠dio|me matar|acabar com tudo|crise|desespero|n√£o aguento mais|n√£o consigo mais)/i,
      /(emerg√™ncia|socorro|ajuda urgente|preciso agora|√© urgente)/i,
      /(ataque.*p√¢nico|crise.*ansiedade|n√£o consigo.*respirar|cora√ß√£o.*acelerado)/i,
      /(pensamentos.*suicidas|automutila√ß√£o|me machucar)/i
    ];

    const highUrgencyPatterns = [
      /(hoje mesmo|agora|imediato|urgente|n√£o posso esperar)/i,
      /(dor.*forte|muito.*mal|piorando|insuport√°vel)/i,
      /(prazo.*vencendo|amanh√£|deadline|data.*limite)/i
    ];

    const timeConstraintPatterns = [
      /(hoje|amanh√£|essa semana|pr√≥xima semana|at√©.*dia|antes.*do)/i,
      /(manh√£|tarde|noite|fim.*semana|segunda|ter√ßa|quarta|quinta|sexta)/i
    ];

    const emotionalDistressPatterns = [
      /(ansioso|nervoso|preocupado|estressado|angustiado)/i,
      /(triste|deprimido|sem.*esperan√ßa|desesperado)/i,
      /(frustrado|irritado|revoltado|bravo)/i,
      /(feliz|animado|empolgado|contente)/i
    ];

    const specialNeedsPatterns = [
      /(cadeirante|defici√™ncia|acessibilidade|limita√ß√£o)/i,
      /(idoso|crian√ßa|gr√°vida|lactante)/i,
      /(alergia|sensibilidade|restri√ß√£o)/i
    ];

    // Determinar urg√™ncia
    let urgency: UrgencyLevel = 'low';
    let priority: PriorityLevel = 'flexible';
    
    if (criticalPatterns.some(pattern => pattern.test(text))) {
      urgency = 'critical';
      priority = 'immediate';
    } else if (highUrgencyPatterns.some(pattern => pattern.test(text))) {
      urgency = 'high';
      priority = 'same_day';
    } else if (timeConstraintPatterns.some(pattern => pattern.test(text))) {
      urgency = 'medium';
      priority = text.includes('hoje') ? 'same_day' : 'next_day';
    } else {
      urgency = 'low';
      priority = 'week';
    }

    // Determinar estado emocional
    let emotionalState: ContextualInfo['emotionalState'] = 'calm';
    if (text.match(/(ansioso|nervoso|preocupado|estressado|angustiado|desesperado)/i)) {
      emotionalState = 'distressed';
    } else if (text.match(/(triste|deprimido|sem.*esperan√ßa)/i)) {
      emotionalState = 'anxious';
    } else if (text.match(/(frustrado|irritado|revoltado|bravo)/i)) {
      emotionalState = 'frustrated';
    } else if (text.match(/(feliz|animado|empolgado|contente)/i)) {
      emotionalState = 'excited';
    }

    // Extrair restri√ß√µes de tempo
    const timeConstraints: string[] = [];
    const timeMatches = text.match(/(hoje|amanh√£|essa semana|pr√≥xima semana|segunda|ter√ßa|quarta|quinta|sexta|manh√£|tarde|noite)/gi);
    if (timeMatches) {
      timeConstraints.push(...timeMatches);
    }

    // Extrair necessidades especiais
    const specialNeeds: string[] = [];
    const specialMatches = text.match(/(cadeirante|defici√™ncia|acessibilidade|limita√ß√£o|idoso|crian√ßa|gr√°vida|alergia|sensibilidade)/gi);
    if (specialMatches) {
      specialNeeds.push(...specialMatches);
    }

    // Ajustar urg√™ncia baseada no intent (removido emergency/healthcare/complaint - n√£o existem em produ√ß√£o)
    // Mant√©m apenas urg√™ncia padr√£o baseada em padr√µes de texto

    const context: ContextualInfo = {
      isEmergency: urgency === 'critical',
      requiresImmediate: priority === 'immediate',
      timeConstraints: timeConstraints.length > 0 ? timeConstraints : undefined,
      specialNeeds: specialNeeds.length > 0 ? specialNeeds : undefined,
      emotionalState
    };

    return { urgency, priority, context };
  }

  /**
   * Detecta e persiste intent a n√≠vel de mensagem
   * Intent √© detectado para CADA mensagem e pode mudar m√∫ltiplas vezes
   */
  async detectAndPersistIntent(
    conversationId: string,
    messageText: string,
    tenantId: string
  ): Promise<IntentDetectionResult> {
    try {
      console.log(`üîç [INTENT] Analisando mensagem: "${messageText.substring(0, 50)}..."`);
      
      // Fase 1: Detec√ß√£o por REGEX (mais r√°pida e precisa)
      const regexResult = this.detectIntentByRegex(messageText);
      if (regexResult.intent && regexResult.confidence > 0.8) {
        // Analisar urg√™ncia e contexto
        const { urgency, priority, context } = this.analyzeUrgencyAndContext(messageText, regexResult.intent);
        regexResult.urgency = urgency;
        regexResult.priority = priority;
        regexResult.context = context;
        
        console.log(`‚úÖ [INTENT] Detectado via REGEX: ${regexResult.intent} (${regexResult.confidence}) - Urg√™ncia: ${urgency}, Prioridade: ${priority}`);
        await this.persistMessageIntent(conversationId, regexResult.intent, regexResult.method, urgency, priority, context);
        return regexResult;
      } else {
        // Registrar falha na camada REGEX para monitoramento
        await intentCascadeMonitor.recordRegexFailure(
          tenantId, 
          messageText, 
          `Low confidence: ${regexResult.confidence || 0} (intent: ${regexResult.intent || 'none'})`
        );
      }

      // Fase 2: Detec√ß√£o por LLM (mais contextual)
      const llmResult = await this.detectIntentByLLM(messageText, tenantId);
      if (llmResult.intent && llmResult.confidence > 0.6) {
        // Analisar urg√™ncia e contexto
        const { urgency, priority, context } = this.analyzeUrgencyAndContext(messageText, llmResult.intent);
        llmResult.urgency = urgency;
        llmResult.priority = priority;
        llmResult.context = context;
        
        console.log(`‚úÖ [INTENT] Detectado via LLM: ${llmResult.intent} (${llmResult.confidence}) - Urg√™ncia: ${urgency}, Prioridade: ${priority}`);
        await this.persistMessageIntent(conversationId, llmResult.intent, llmResult.method, urgency, priority, context);
        return llmResult;
      } else {
        // Registrar falha na camada LLM para monitoramento
        await intentCascadeMonitor.recordLlmFailure(
          tenantId, 
          messageText, 
          `Low confidence: ${llmResult.confidence || 0} (intent: ${llmResult.intent || 'none'})`,
          llmResult.confidence
        );
      }

      // Fase 3: Fallback determin√≠stico
      const fallbackResult = this.detectIntentDeterministic(messageText);
      
      // Registrar uso de fallback para monitoramento (indica degrada√ß√£o do sistema)
      await intentCascadeMonitor.recordFallbackUsage(tenantId, messageText, fallbackResult.intent);
      
      // Analisar urg√™ncia e contexto
      const { urgency, priority, context } = this.analyzeUrgencyAndContext(messageText, fallbackResult.intent);
      fallbackResult.urgency = urgency;
      fallbackResult.priority = priority;
      fallbackResult.context = context;
      
      console.log(`‚úÖ [INTENT] Fallback determin√≠stico: ${fallbackResult.intent} (${fallbackResult.confidence}) - Urg√™ncia: ${urgency}, Prioridade: ${priority}`);
      await this.persistMessageIntent(conversationId, fallbackResult.intent, fallbackResult.method, urgency, priority, context);
      return fallbackResult;

    } catch (error) {
      console.error('‚ùå [INTENT] Erro ao detectar intent:', error);
      const fallbackResult: IntentDetectionResult = {
        intent: 'wrong_number',
        confidence: 0.1,
        method: 'deterministic',
        metadata: { error: error instanceof Error ? error.message : 'Unknown error' },
        urgency: 'low',
        priority: 'flexible',
        context: {
          isEmergency: false,
          requiresImmediate: false,
          emotionalState: 'calm'
        }
      };
      await this.persistMessageIntent(conversationId, fallbackResult.intent, fallbackResult.method, fallbackResult.urgency, fallbackResult.priority, fallbackResult.context);
      return fallbackResult;
    }
  }

  /**
   * Finaliza outcome apenas quando conversa√ß√£o √© completada ou abandonada
   * Outcome √© persistido APENAS na √∫ltima mensagem da conversa
   */
  async finalizeOutcome(
    sessionId: string, 
    outcome: ConversationOutcome
  ): Promise<OutcomeFinalizeResult> {
    try {
      console.log(`üéØ [OUTCOME] Finalizando conversa ${sessionId} com outcome: ${outcome}`);

      const now = new Date().toISOString();

      // Atualizar APENAS a √∫ltima mensagem da sess√£o com o outcome
      const { data: lastMessage, error: findError } = await supabaseAdmin
        .from('conversation_history')
        .select('id, created_at')
        .eq('session_id_uuid', sessionId)
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (findError || !lastMessage) {
        console.error('‚ùå [OUTCOME] N√£o foi poss√≠vel encontrar √∫ltima mensagem:', findError);
        return {
          success: false,
          outcome,
          conversation_id: sessionId,
          finalized_at: now
        };
      }

      // Atualizar apenas a √∫ltima mensagem com outcome
      const { error: updateError } = await supabaseAdmin
        .from('conversation_history')
        .update({
          conversation_outcome: outcome
        })
        .eq('id', lastMessage.id);

      if (updateError) {
        console.error('‚ùå [OUTCOME] Erro ao persistir outcome:', updateError);
        return {
          success: false,
          outcome,
          conversation_id: sessionId,
          finalized_at: now
        };
      }

      console.log(`‚úÖ [OUTCOME] Outcome finalizado com sucesso: ${outcome}`);
      return {
        success: true,
        outcome,
        conversation_id: sessionId,
        finalized_at: now
      };

    } catch (error) {
      console.error('‚ùå [OUTCOME] Erro ao finalizar outcome:', error);
      return {
        success: false,
        outcome,
        conversation_id: sessionId,
        finalized_at: new Date().toISOString()
      };
    }
  }

  /**
   * Verifica se uma conversa√ß√£o deve ter seu outcome finalizado
   */
  shouldFinalizeOutcome(
    flowType: string | null,
    flowStep: string | null,
    lastActivity: string
  ): { shouldFinalize: boolean; suggestedOutcome: ConversationOutcome } {
    
    const lastActivityTime = new Date(lastActivity);
    const now = new Date();
    const minutesSinceActivity = (now.getTime() - lastActivityTime.getTime()) / (1000 * 60);
    
    // Timeout abandonment (mais de 30 minutos sem atividade)
    if (minutesSinceActivity > 30) {
      if (flowType === 'booking' && flowStep !== 'complete') {
        return { shouldFinalize: true, suggestedOutcome: 'booking_abandoned' };
      }
      if (flowType === 'reschedule' && flowStep !== 'complete') {
        return { shouldFinalize: true, suggestedOutcome: 'reschedule_abandoned' };
      }
      if (flowType === 'cancel' && flowStep !== 'complete') {
        return { shouldFinalize: true, suggestedOutcome: 'cancel_abandoned' };
      }
      return { shouldFinalize: true, suggestedOutcome: 'timeout_abandoned' };
    }

    // Fluxos completos
    if (flowStep === 'complete') {
      if (flowType === 'booking') {
        return { shouldFinalize: true, suggestedOutcome: 'appointment_created' };
      }
      if (flowType === 'reschedule') {
        return { shouldFinalize: true, suggestedOutcome: 'appointment_rescheduled' };
      }
      if (flowType === 'cancel') {
        return { shouldFinalize: true, suggestedOutcome: 'appointment_cancelled' };
      }
    }

    // Fluxos informativos (pre√ßos, servi√ßos, disponibilidade)
    if (['pricing', 'services', 'availability', 'address', 'my_appointments'].includes(flowType || '')) {
      return { shouldFinalize: true, suggestedOutcome: 'information_provided' };
    }

    return { shouldFinalize: false, suggestedOutcome: 'conversation_ongoing' };
  }


  /**
   * Detec√ß√£o de intent por REGEX (Fase 1 - mais r√°pida)
   */
  private detectIntentByRegex(messageText: string): IntentDetectionResult {
    const text = messageText.toLowerCase().trim();
    
    // Patterns espec√≠ficos com alta confian√ßa - Expandidos para melhor cobertura lingu√≠stica brasileira
    const patterns = [
      // EMERG√äNCIA (prioridade m√°xima)
      {
        intent: 'emergency' as MessageIntent,
        regex: /(emerg√™ncia|urgente|socorro|ajuda|suic√≠dio|me matar|n√£o aguento|acabar com tudo|crise|desespero|n√£o consigo mais)/i,
        confidence: 0.98
      },
      
      // === INTENTS ESPEC√çFICOS POR DOM√çNIO ===
      
      // HEALTHCARE (Sa√∫de Mental)
      {
        intent: 'healthcare_emergency' as MessageIntent,
        regex: /(crise.*ansiedade|ataque.*p√¢nico|depress√£o|n√£o consigo.*dormir|pensamentos.*suicidas|automutila√ß√£o|cortar.*se|me machucar)/i,
        confidence: 0.97
      },
      {
        intent: 'healthcare_therapy' as MessageIntent,
        regex: /(terapia|psicoterapia|an√°lise|terapia.*casal|terapia.*fam√≠lia|psican√°lise|gestalt|cognitiva|comportamental)/i,
        confidence: 0.95
      },
      {
        intent: 'healthcare_medication' as MessageIntent,
        regex: /(medica√ß√£o|rem√©dio|antidepressivo|ansiol√≠tico|receita|prescri√ß√£o|dosagem|efeito.*colateral)/i,
        confidence: 0.95
      },
      
      // BEAUTY (Beleza e Est√©tica)
      {
        intent: 'beauty_treatment' as MessageIntent,
        regex: /(botox|preenchimento|limpeza.*pele|peeling|microagulhamento|hidrafacial|radiofrequ√™ncia|criolip√≥lise)/i,
        confidence: 0.95
      },
      {
        intent: 'beauty_combo' as MessageIntent,
        regex: /(pacote.*beleza|combo|dia.*noiva|make.*cabelo|unha.*cabelo|escova.*progressiva.*junto)/i,
        confidence: 0.9
      },
      
      // LEGAL (Jur√≠dico)
      {
        intent: 'legal_consultation' as MessageIntent,
        regex: /(consulta.*jur√≠dica|advogado|direito.*fam√≠lia|trabalhista|criminal|c√≠vel|processo|audi√™ncia)/i,
        confidence: 0.95
      },
      {
        intent: 'legal_document' as MessageIntent,
        regex: /(contrato|procura√ß√£o|peti√ß√£o|recurso|documento|certid√£o|registro|escritura)/i,
        confidence: 0.9
      },
      
      // SPORTS (Esportes)
      {
        intent: 'sports_training' as MessageIntent,
        regex: /(treino|personal.*trainer|muscula√ß√£o|crossfit|funcional|condicionamento|prepara√ß√£o.*f√≠sica)/i,
        confidence: 0.95
      },
      {
        intent: 'sports_injury' as MessageIntent,
        regex: /(les√£o|fisioterapia|reabilita√ß√£o|dor.*muscular|entorse|distens√£o|recupera√ß√£o.*les√£o)/i,
        confidence: 0.95
      },
      
      // EDUCATION (Educa√ß√£o)
      {
        intent: 'education_course' as MessageIntent,
        regex: /(curso|aula|treinamento|capacita√ß√£o|workshop|palestra|forma√ß√£o|certifica√ß√£o)/i,
        confidence: 0.9
      },
      {
        intent: 'education_assessment' as MessageIntent,
        regex: /(avalia√ß√£o|prova|teste|exame|diagn√≥stico.*educacional|an√°lise.*aprendizagem)/i,
        confidence: 0.9
      },
      
      // CONSULTING (Consultoria)
      {
        intent: 'consulting_strategy' as MessageIntent,
        regex: /(consultoria|estrat√©gia|planejamento|gest√£o|neg√≥cios|an√°lise.*mercado|plano.*neg√≥cios)/i,
        confidence: 0.9
      },
      {
        intent: 'consulting_analysis' as MessageIntent,
        regex: /(an√°lise.*financeira|due.*diligence|diagn√≥stico|auditoria|relat√≥rio|assessment)/i,
        confidence: 0.9
      },
      
      // AGENDAMENTO - Expandido com mais varia√ß√µes brasileiras
      {
        intent: 'appointment_inquiry',
        regex: /(quero|gostaria|preciso|vou|queria|t√¥ querendo|desejo).*(agendar|marcar|reservar|consulta|sess√£o|atendimento)|(agendar|marcar|reservar).*(consulta|hor√°rio|atendimento|sess√£o|procedimento)|posso.*marcar|tem.*vaga|consegue.*agendar|d√°.*pra.*marcar/i,
        confidence: 0.95
      },
      
      // REAGENDAMENTO - Mais varia√ß√µes coloquiais
      {
        intent: 'reschedule',
        regex: /(reagenda|remarcar|mudar.*hora|alterar.*agendamento|trocar.*data|mover.*agendamento|empurrar|adiar|transferir.*consulta|passar.*pra.*outro.*dia)/i,
        confidence: 0.95
      },
      
      // CANCELAMENTO - Incluindo g√≠rias e express√µes informais
      {
        intent: 'cancel',
        regex: /(cancelar|desmarcar|anular|remover.*agendamento|excluir.*agendamento|n√£o.*quero.*mais|desistir|n√£o.*vou.*mais|n√£o.*d√°.*mais|mudei.*de.*ideia)/i,
        confidence: 0.95
      },
      
      // CONFIRMA√á√ÉO
      {
        intent: 'confirm',
        regex: /(confirmar|confirmo|t√° confirmado|pode.*confirmar|vou.*sim|estarei.*l√°|confirmado|sim.*vou|mant√©m|ok.*confirma)/i,
        confidence: 0.9
      },
      
      // DISPONIBILIDADE - Mais varia√ß√µes regionais (SEM que.*horas para evitar conflito)
      {
        intent: 'availability',
        regex: /(disponibilidade|dispon√≠vel|hor√°rios.*livres|vagas|tem.*hor√°rio|agenda|quando.*posso|que.*dia.*tem|hor√°rio.*livre)/i,
        confidence: 0.9
      },
      
      // PROFISSIONAL ESPEC√çFICO
      {
        intent: 'professional_preference' as MessageIntent,
        regex: /(com.*doutor|com.*doutora|com.*dr|com.*dra|profissional|atender.*com|quero.*com|prefer√™ncia|mesmo.*profissional)/i,
        confidence: 0.9
      },
      
      // SERVI√áOS - Expandido com termos espec√≠ficos de dom√≠nio
      {
        intent: 'services' as MessageIntent,
        regex: /(que.*servi√ßos|quais.*procedimentos|o.*que.*fazem|tipos.*atendimento|especialidades|tratamentos|que.*voc√™s.*fazem|card√°pio|menu.*servi√ßos)/i,
        confidence: 0.9
      },
      
      // INFORMA√á√ïES SOBRE TRATAMENTOS
      {
        intent: 'treatment_info' as MessageIntent,
        regex: /(como.*funciona|dura√ß√£o|tempo.*demora|que.*√©.*isso|explicar|detalhe|informa√ß√£o.*sobre|como.*√©.*feito)/i,
        confidence: 0.9
      },
      
      // PRE√áOS - Mais g√≠rias e express√µes
      {
        intent: 'pricing' as MessageIntent,
        regex: /(quanto.*custa|pre√ßo|valor|tabela.*pre√ßos|valores|sai.*por|fica.*quanto|investimento|or√ßamento|taxa)/i,
        confidence: 0.9
      },
      
      // CONV√äNIO/PLANO DE SA√öDE
      {
        intent: 'insurance' as MessageIntent,
        regex: /(conv√™nio|plano.*sa√∫de|unimed|bradesco.*sa√∫de|amil|particular|pelo.*plano|aceita.*conv√™nio|atrav√©s.*do.*plano)/i,
        confidence: 0.9
      },
      
      // PAGAMENTO
      {
        intent: 'payment' as MessageIntent,
        regex: /(forma.*pagamento|cart√£o|pix|dinheiro|parcelado|parcela|d√©bito|cr√©dito|√†.*vista|como.*pago)/i,
        confidence: 0.9
      },
      
      // MEUS AGENDAMENTOS
      {
        intent: 'my_appointments' as MessageIntent,
        regex: /(meus.*agendamentos|minha.*consulta|ver.*agendamento|status.*agendamento|quando.*√©|que.*dia.*√©|pr√≥xima.*consulta)/i,
        confidence: 0.9
      },
      
      // RECLAMA√á√ÉO/PROBLEMA
      {
        intent: 'complaint' as MessageIntent,
        regex: /(reclamar|problema|errado|ruim|insatisfeito|n√£o.*gostei|p√©ssimo|horr√≠vel|decepcionado|revoltado)/i,
        confidence: 0.9
      },
      
      // ELOGIO/FEEDBACK POSITIVO
      {
        intent: 'compliment' as MessageIntent,
        regex: /(adorei|amei|excelente|√≥timo|perfeito|maravilhoso|recomendo|satisfeito|parab√©ns|muito.*bom)/i,
        confidence: 0.9
      },
      
      // LOCALIZA√á√ÉO
      {
        intent: 'address' as MessageIntent,
        regex: /(onde.*fica|endere√ßo|localiza√ß√£o|como.*chegar|onde.*√©|fica.*aonde|como.*ir|google.*maps)/i,
        confidence: 0.9
      },
      
      // CONTATO
      {
        intent: 'contact' as MessageIntent,
        regex: /(telefone|whatsapp|email|contato|falar.*com|ligar)/i,
        confidence: 0.9
      },
      
      // LISTA DE ESPERA
      {
        intent: 'waiting_list' as MessageIntent,
        regex: /(lista.*espera|encaixe|se.*cancelar|sobrar.*vaga|me.*avisa|se.*der)/i,
        confidence: 0.9
      },
      
      // AGENDAMENTO EM GRUPO
      {
        intent: 'group_booking' as MessageIntent,
        regex: /(em.*fam√≠lia|junto|mesmo.*hor√°rio|grupo|casal|todos.*juntos|para.*duas|pra.*tr√™s)/i,
        confidence: 0.9
      },
      
      // PACOTES
      {
        intent: 'package_deal' as MessageIntent,
        regex: /(pacote|combo|promo√ß√£o|desconto|conjunto|v√°rias.*sess√µes|m√∫ltiplas)/i,
        confidence: 0.9
      },
      
      // PROGRAMA DE FIDELIDADE
      {
        intent: 'loyalty_program' as MessageIntent,
        regex: /(fidelidade|cart√£o.*cliente|programa|pontos|benef√≠cios|cashback)/i,
        confidence: 0.9
      },
      
      // INDICA√á√ÉO
      {
        intent: 'referral' as MessageIntent,
        regex: /(indica√ß√£o|recomenda√ß√£o|me.*indicaram|falaram.*bem|amiga.*disse)/i,
        confidence: 0.9
      },
      
      // NECESSIDADES ESPECIAIS
      {
        intent: 'special_needs' as MessageIntent,
        regex: /(cadeirante|acessibilidade|defici√™ncia|especial|preciso.*ajuda|limita√ß√£o|mobilidade)/i,
        confidence: 0.9
      },
      
      // ACOMPANHAMENTO
      {
        intent: 'follow_up' as MessageIntent,
        regex: /(como.*foi|resultado|depois.*do|p√≥s.*consulta|como.*est√°|evoluindo|melhorou)/i,
        confidence: 0.85
      },
      
      // CUMPRIMENTOS - Pattern mais espec√≠fico para evitar falsos positivos
      {
        intent: 'greeting',
        regex: /^(oi|ol√°|opa|e.*a√≠|bom.*dia|boa.*tarde|boa.*noite|hey|hello|al√¥)(\s|$|,|!|\?)|(^|\s)(oi|ol√°|bom.*dia|boa.*tarde|boa.*noite)(\s|$|,|!|\?)/i,
        confidence: 0.8
      },
      
      // HOR√ÅRIO DE FUNCIONAMENTO
      {
        intent: 'business_hours',
        regex: /(que.*horas.*abr|que.*horas.*fech|hor√°rio.*funcionamento|funciona.*at√©|abre.*que.*hora|fecha.*que.*hora)/i,
        confidence: 0.85
      },
      
      // ONBOARDING - PRIMEIRA VEZ
      {
        intent: 'wrong_number', // ONBOARDING moved to SystemFlowState
        regex: /(primeira.*vez|nunca.*vim|novo.*aqui|n√£o.*conhe√ßo|primeiro.*contato)/i,
        confidence: 0.85
      }
    ];

    for (const pattern of patterns) {
      if (pattern.regex.test(text)) {
        return {
          intent: pattern.intent as BusinessIntent,
          confidence: pattern.confidence,
          method: 'regex',
          metadata: { matched_pattern: pattern.regex.source }
        };
      }
    }

    return {
      intent: 'wrong_number',
      confidence: 0,
      method: 'regex'
    };
  }

  /**
   * Detec√ß√£o de intent por LLM (Fase 2 - mais contextual)
   * Simula√ß√£o - em implementa√ß√£o real usaria OpenAI
   */
  private async detectIntentByLLM(messageText: string, _tenantId: string): Promise<IntentDetectionResult> {
    // TODO: Implementar chamada real para OpenAI/GPT-4
    // Por enquanto, retorna detec√ß√£o b√°sica contextual
    
    const text = messageText.toLowerCase();
    
    // Simula√ß√£o de an√°lise contextual por LLM
    if (text.includes('preciso') && (text.includes('hoje') || text.includes('urgente'))) {
      return {
        intent: 'appointment_inquiry',
        confidence: 0.8,
        method: 'llm',
        metadata: { context: 'urgency_detected' }
      };
    }

    if (text.includes('n√£o posso') && (text.includes('ir') || text.includes('comparecer'))) {
      return {
        intent: 'reschedule',
        confidence: 0.75,
        method: 'llm',
        metadata: { context: 'conflict_detected' }
      };
    }

    return {
      intent: 'wrong_number',
      confidence: 0,
      method: 'llm'
    };
  }

  /**
   * Detec√ß√£o determin√≠stica (Fase 3 - fallback) - Expandida com novos intents
   */
  private detectIntentDeterministic(messageText: string): IntentDetectionResult {
    const text = messageText.toLowerCase().trim();
    
    // === PADR√ïES BASEADOS EM DADOS REAIS DE PRODU√á√ÉO ===
    
    // Confirma√ß√£o - ESSENCIAL PARA SAAS DE AGENDAMENTO
    if (text.includes('confirmar') || text.includes('confirmo') || text.includes('confirmado') || text.includes('ok') || text.includes('sim')) {
      return { intent: 'confirm', confidence: 0.9, method: 'deterministic' };
    }
    
    // Agendamento (38 usos em produ√ß√£o)
    if (text.includes('agendar') || text.includes('marcar') || text.includes('reservar')) {
      return { intent: 'appointment_inquiry', confidence: 0.8, method: 'deterministic' };
    }
    
    // Reagendamento (20 usos)
    if (text.includes('reagendar') || text.includes('remarcar') || text.includes('adiar')) {
      return { intent: 'reschedule', confidence: 0.8, method: 'deterministic' };
    }
    
    // Cancelamento (14 usos em produ√ß√£o)
    if (text.includes('cancelar') || text.includes('desmarcar') || text.includes('desistir')) {
      return { intent: 'cancel', confidence: 0.8, method: 'deterministic' };
    }
    
    // Pre√ßos (14 usos em produ√ß√£o)
    if (text.includes('pre√ßo') || text.includes('valor') || text.includes('quanto')) {
      return { intent: 'pricing', confidence: 0.8, method: 'deterministic' };
    }
    
    // Conv√™nio/Seguro (0 usos em produ√ß√£o - REMOVIDO)
    // if (text.includes('conv√™nio') || text.includes('plano') || text.includes('seguro')) {
    //   return { intent: UserIntent.INSURANCE_INQUIRY, confidence: 0.8, method: 'deterministic' };
    // }
    
    // Disponibilidade (17 usos)
    if (text.includes('dispon√≠vel') || text.includes('hor√°rio') || text.includes('vaga')) {
      return { intent: 'availability', confidence: 0.8, method: 'deterministic' };
    }
    
    // Servi√ßos (57 usos)
    if (text.includes('servi√ßos') || text.includes('tratamentos') || text.includes('procedimentos')) {
      return { intent: 'services', confidence: 0.8, method: 'deterministic' };
    }
    
    // Endere√ßo - ESSENCIAL PARA NEG√ìCIOS F√çSICOS
    if (text.includes('endere√ßo') || text.includes('localiza√ß√£o') || text.includes('onde')) {
      return { intent: 'address', confidence: 0.8, method: 'deterministic' };
    }
    
    // Hor√°rio de funcionamento - INFORMA√á√ÉO B√ÅSICA DO NEG√ìCIO
    if (text.includes('funciona') || text.includes('abre') || text.includes('fecha')) {
      return { intent: 'business_hours', confidence: 0.8, method: 'deterministic' };
    }
    
    // Cumprimento/Sauda√ß√£o (154 usos)
    if (text.includes('oi') || text.includes('ol√°') || text.includes('bom dia') || text.includes('boa tarde')) {
      return { intent: 'greeting', confidence: 0.9, method: 'deterministic' };
    }
    
    // Teste (17 usos - dados de desenvolvimento, n√£o essencial para SaaS)
    // if (text.includes('teste') || text.includes('ping') || text.includes('test')) {
    //   return { intent: UserIntent.TEST_MESSAGE, confidence: 0.9, method: 'deterministic' };
    // }
    
    // Abandonar agendamento (11 usos)
    if (text.includes('deixa pra l√°') || text.includes('n√£o quero mais') || text.includes('desisti')) {
      return { intent: 'cancel', confidence: 0.8, method: 'deterministic' }; // BOOKING_ABANDONED -> CANCEL_APPOINTMENT
    }

    // Fallback para casos n√£o mapeados
    return {
      intent: 'wrong_number',
      confidence: 0.3,
      method: 'deterministic',
      metadata: { fallback: true, note: 'Uses real deterministic-intent-detector.service.ts in production' }
    };
  }

  /**
   * Persiste intent detectado na mensagem com urg√™ncia e contexto
   */
  private async persistMessageIntent(
    conversationId: string,
    intent: MessageIntent,
    method: string,
    urgency?: UrgencyLevel,
    priority?: PriorityLevel,
    context?: ContextualInfo
  ): Promise<void> {
    try {
      // ‚úÖ FILTRO: S√≥ persiste intents reais do usu√°rio, n√£o estados de flow
      if (!intent || !isValidIntent(intent)) {
        console.log(`üö´ [INTENT] N√£o persistindo "${intent}" - n√£o √© um UserIntent v√°lido`);
        return;
      }

      // Atualizar APENAS o intent da mensagem atual (n√£o mexer no conversation_context!)
      const { error } = await supabaseAdmin
        .from('conversation_history')
        .update({
          intent_detected: intent
        })
        .eq('id', conversationId); // conversationId √© na verdade o ID da mensagem

      if (error) {
        console.error('‚ùå [INTENT] Erro ao persistir intent:', error);
      } else {
        console.log(`‚úÖ [INTENT] Intent persistido: ${intent} via ${method} - Urg√™ncia: ${urgency}, Prioridade: ${priority}`);
        
        // Log adicional para contextos cr√≠ticos
        if (urgency === 'critical' || context?.isEmergency) {
          console.warn(`üö® [URGENT] Contexto cr√≠tico detectado para mensagem ${conversationId}: ${intent} - ${context?.emotionalState}`);
        }
      }
    } catch (error) {
      console.error('‚ùå [INTENT] Erro interno ao persistir intent:', error);
    }
  }

  /**
   * VERIFICAR SE CONVERSA EST√Å FINALIZADA
   * (para ser chamado periodicamente)
   */
  async checkForFinishedConversations(): Promise<void> {
    try {
      const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
      
      // Buscar sess√µes sem outcome nas √∫ltimas 10 minutos (√∫ltima mensagem pode ser do usu√°rio OU da IA)
      const { data, error } = await supabaseAdmin
        .from('conversation_history')
        .select('session_id_uuid, created_at')
        .is('conversation_outcome', null)
        .lt('created_at', tenMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(500);

      if (error || !data) {
        console.warn('‚ö†Ô∏è No sessions fetched for outcome scan', error);
        return;
      }

      // Deduplicar por sess√£o (ignorar nulos)
      const uniqueSessions = [...new Set(
        data
          .map((row: any) => row.session_id_uuid)
          .filter((s: string | null) => !!s)
      )];

      console.info(`üîç Checking ${uniqueSessions.length} sessions for timeout outcomes`);

      for (const sessionId of uniqueSessions) {
        console.log(`üîç [SESSION] Analisando sess√£o: ${sessionId}`);
        
        // Buscar contexto da sess√£o para determinar outcome
        const { data: sessionData, error: sessionError } = await supabaseAdmin
          .from('conversation_history')
          .select('conversation_context, created_at')
          .eq('session_id_uuid', sessionId)
          .order('created_at', { ascending: false })
          .limit(1)
          .single();

        if (sessionError || !sessionData) {
          console.warn(`‚ö†Ô∏è Could not fetch session data for ${sessionId}`);
          continue;
        }

        const flowType = sessionData.conversation_context?.flow_type || null;
        const flowStep = sessionData.conversation_context?.flow_step || null;
        
        const { shouldFinalize, suggestedOutcome } = this.shouldFinalizeOutcome(
          flowType,
          flowStep,
          sessionData.created_at
        );

        if (shouldFinalize) {
          console.log(`üéØ [OUTCOME] Finalizando sess√£o ${sessionId} com outcome: ${suggestedOutcome}`);
          await this.finalizeOutcome(sessionId, suggestedOutcome);
        } else {
          console.log(`‚è≥ [OUTCOME] Sess√£o ${sessionId} ainda n√£o precisa ser finalizada`);
        }
      }

    } catch (error) {
      console.error('‚ùå Failed to check finished conversations', error);
    }
  }
}